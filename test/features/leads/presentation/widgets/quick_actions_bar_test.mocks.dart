// Mocks generated by Mockito 5.4.6 from annotations
// in leadloq/test/features/leads/presentation/widgets/quick_actions_bar_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:leadloq/core/error/failures.dart' as _i5;
import 'package:leadloq/features/leads/domain/entities/job.dart' as _i9;
import 'package:leadloq/features/leads/domain/entities/lead.dart' as _i6;
import 'package:leadloq/features/leads/domain/entities/lead_timeline_entry.dart'
    as _i7;
import 'package:leadloq/features/leads/domain/repositories/leads_repository.dart'
    as _i3;
import 'package:leadloq/features/leads/domain/usecases/browser_automation_usecase.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LeadsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeadsRepository extends _i1.Mock implements _i3.LeadsRepository {
  MockLeadsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Lead>>> getLeads({
    String? status,
    String? search,
    bool? candidatesOnly,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLeads,
          [],
          {
            #status: status,
            #search: search,
            #candidatesOnly: candidatesOnly,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Lead>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Lead>>(
          this,
          Invocation.method(
            #getLeads,
            [],
            {
              #status: status,
              #search: search,
              #candidatesOnly: candidatesOnly,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Lead>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>> getLead(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLead,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>>.value(
            _FakeEither_0<_i5.Failure, _i6.Lead>(
          this,
          Invocation.method(
            #getLead,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>> updateLead(_i6.Lead? lead) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLead,
          [lead],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>>.value(
            _FakeEither_0<_i5.Failure, _i6.Lead>(
          this,
          Invocation.method(
            #updateLead,
            [lead],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>> updateTimelineEntry(
    String? leadId,
    _i7.LeadTimelineEntry? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTimelineEntry,
          [
            leadId,
            entry,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>>.value(
            _FakeEither_0<_i5.Failure, _i6.Lead>(
          this,
          Invocation.method(
            #updateTimelineEntry,
            [
              leadId,
              entry,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Lead>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addTimelineEntry(
    String? leadId,
    Map<String, dynamic>? entryData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTimelineEntry,
          [
            leadId,
            entryData,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addTimelineEntry,
            [
              leadId,
              entryData,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> startAutomation(
          _i8.BrowserAutomationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAutomation,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #startAutomation,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Stream<_i9.Job> watchJob(String? jobId) => (super.noSuchMethod(
        Invocation.method(
          #watchJob,
          [jobId],
        ),
        returnValue: _i4.Stream<_i9.Job>.empty(),
      ) as _i4.Stream<_i9.Job>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteMockLeads() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMockLeads,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #deleteMockLeads,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>
      recalculateConversionScores() => (super.noSuchMethod(
            Invocation.method(
              #recalculateConversionScores,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>.value(
                    _FakeEither_0<_i5.Failure, Map<String, dynamic>>(
              this,
              Invocation.method(
                #recalculateConversionScores,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteLead(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteLead,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteLead,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteLeads(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteLeads,
          [ids],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteLeads,
            [ids],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
