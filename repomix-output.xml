This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        java/
          io/
            flutter/
              plugins/
                GeneratedPluginRegistrant.java
        kotlin/
          com/
            leadforge/
              leadforge_app/
                MainActivity.kt
        res/
          drawable/
            launch_background.xml
          drawable-v21/
            launch_background.xml
          values/
            styles.xml
          values-night/
            styles.xml
        AndroidManifest.xml
      profile/
        AndroidManifest.xml
    build.gradle.kts
  gradle/
    wrapper/
      gradle-wrapper.properties
  .gitignore
  build.gradle.kts
  gradle.properties
  settings.gradle.kts
ios/
  Flutter/
    AppFrameworkInfo.plist
    Debug.xcconfig
    Release.xcconfig
  Runner/
    Assets.xcassets/
      AppIcon.appiconset/
        Contents.json
      LaunchImage.imageset/
        Contents.json
        README.md
    Base.lproj/
      LaunchScreen.storyboard
      Main.storyboard
    AppDelegate.swift
    Info.plist
    Runner-Bridging-Header.h
  Runner.xcodeproj/
    project.xcworkspace/
      xcshareddata/
        IDEWorkspaceChecks.plist
        WorkspaceSettings.xcsettings
      contents.xcworkspacedata
    xcshareddata/
      xcschemes/
        Runner.xcscheme
    project.pbxproj
  Runner.xcworkspace/
    xcshareddata/
      IDEWorkspaceChecks.plist
      WorkspaceSettings.xcsettings
    contents.xcworkspacedata
  RunnerTests/
    RunnerTests.swift
  .gitignore
  Podfile
  Podfile.lock
lib/
  core/
    error/
      failures.dart
    theme/
      app_theme.dart
  features/
    leads/
      data/
        datasources/
          leads_remote_datasource.dart
          websocket_service.dart
        models/
          lead_model.dart
          lead_model.g.dart
        repositories/
          leads_repository_impl.dart
      domain/
        entities/
          job.dart
          lead.dart
        repositories/
          leads_repository.dart
        usecases/
          run_scrape_usecase.dart
      presentation/
        pages/
          lead_detail_page.dart
          leads_list_page_v2.dart
          leads_list_page.dart
          run_scrape_page.dart
          scrape_monitor_page.dart
          server_diagnostics_page.dart
        providers/
          job_provider.dart
          scrape_form_provider.dart
          server_status_provider.dart
        widgets/
          empty_state.dart
          loading_state.dart
          server_status_indicator.dart
  main.dart
macos/
  Flutter/
    Flutter-Debug.xcconfig
    Flutter-Release.xcconfig
    GeneratedPluginRegistrant.swift
  Runner/
    Assets.xcassets/
      AppIcon.appiconset/
        Contents.json
    Base.lproj/
      MainMenu.xib
    Configs/
      AppInfo.xcconfig
      Debug.xcconfig
      Release.xcconfig
      Warnings.xcconfig
    AppDelegate.swift
    DebugProfile.entitlements
    Info.plist
    MainFlutterWindow.swift
    Release.entitlements
  Runner.xcodeproj/
    project.xcworkspace/
      xcshareddata/
        IDEWorkspaceChecks.plist
    xcshareddata/
      xcschemes/
        Runner.xcscheme
    project.pbxproj
  Runner.xcworkspace/
    xcshareddata/
      IDEWorkspaceChecks.plist
    contents.xcworkspacedata
  RunnerTests/
    RunnerTests.swift
  .gitignore
  Podfile
  Podfile.lock
server/
  scraper/
    gmaps_scraper.py
    gmaps_spider.py
  database.py
  Dockerfile
  main.py
  models.py
  requirements.txt
  schemas.py
  test_server.py
test/
  widget_test.dart
.gitignore
.metadata
analysis_options.yaml
docker-compose.yml
generate_icons.sh
pubspec.lock
pubspec.yaml
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(flutter create:*)",
      "Bash(python3:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(flutter pub:*)",
      "Bash(flutter run:*)",
      "Bash(killall:*)",
      "Bash(kill:*)",
      "Bash(flutter doctor:*)",
      "Bash(touch:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(lsof:*)",
      "mcp__ide__getDiagnostics",
      "Bash(flutter analyze:*)",
      "Bash(flutter build:*)",
      "Bash(dart analyze:*)",
      "Bash(chmod:*)",
      "Bash(./generate_icons.sh:*)",
      "Bash(flutter clean:*)",
      "Bash(open build/macos/Build/Products/Debug/LeadLawk.app)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/jacobanderson/Documents/GitHub/ThriftRaider"
    ]
  }
}
</file>

<file path="android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java">
package io.flutter.plugins;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import io.flutter.Log;

import io.flutter.embedding.engine.FlutterEngine;

/**
 * Generated file. Do not edit.
 * This file is generated by the Flutter tool based on the
 * plugins that support the Android platform.
 */
@Keep
public final class GeneratedPluginRegistrant {
  private static final String TAG = "GeneratedPluginRegistrant";
  public static void registerWith(@NonNull FlutterEngine flutterEngine) {
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin shared_preferences_android, io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin", e);
    }
    try {
      flutterEngine.getPlugins().add(new io.flutter.plugins.urllauncher.UrlLauncherPlugin());
    } catch (Exception e) {
      Log.e(TAG, "Error registering plugin url_launcher_android, io.flutter.plugins.urllauncher.UrlLauncherPlugin", e);
    }
  }
}
</file>

<file path="android/app/src/debug/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
</file>

<file path="android/app/src/main/kotlin/com/leadforge/leadforge_app/MainActivity.kt">
package com.leadforge.leadforge_app

import io.flutter.embedding.android.FlutterActivity

class MainActivity : FlutterActivity()
</file>

<file path="android/app/src/main/res/drawable/launch_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>
</file>

<file path="android/app/src/main/res/drawable-v21/launch_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>
</file>

<file path="android/app/src/main/res/values/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>
</file>

<file path="android/app/src/main/res/values-night/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>
</file>

<file path="android/app/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="LeadLawk"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>
</file>

<file path="android/app/src/profile/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
</file>

<file path="android/app/build.gradle.kts">
plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    namespace = "com.leadforge.leadforge_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.leadforge.leadforge_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}

flutter {
    source = "../.."
}
</file>

<file path="android/gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12-all.zip
</file>

<file path="android/.gitignore">
gradle-wrapper.jar
/.gradle
/captures/
/gradlew
/gradlew.bat
/local.properties
GeneratedPluginRegistrant.java
.cxx/

# Remember to never publicly share your keystore.
# See https://flutter.dev/to/reference-keystore
key.properties
**/*.keystore
**/*.jks
</file>

<file path="android/build.gradle.kts">
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

val newBuildDir: Directory = rootProject.layout.buildDirectory.dir("../../build").get()
rootProject.layout.buildDirectory.value(newBuildDir)

subprojects {
    val newSubprojectBuildDir: Directory = newBuildDir.dir(project.name)
    project.layout.buildDirectory.value(newSubprojectBuildDir)
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register<Delete>("clean") {
    delete(rootProject.layout.buildDirectory)
}
</file>

<file path="android/gradle.properties">
org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=4G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError
android.useAndroidX=true
android.enableJetifier=true
</file>

<file path="android/settings.gradle.kts">
pluginManagement {
    val flutterSdkPath = run {
        val properties = java.util.Properties()
        file("local.properties").inputStream().use { properties.load(it) }
        val flutterSdkPath = properties.getProperty("flutter.sdk")
        require(flutterSdkPath != null) { "flutter.sdk not set in local.properties" }
        flutterSdkPath
    }

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id("dev.flutter.flutter-plugin-loader") version "1.0.0"
    id("com.android.application") version "8.7.3" apply false
    id("org.jetbrains.kotlin.android") version "2.1.0" apply false
}

include(":app")
</file>

<file path="ios/Flutter/AppFrameworkInfo.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>en</string>
  <key>CFBundleExecutable</key>
  <string>App</string>
  <key>CFBundleIdentifier</key>
  <string>io.flutter.flutter.app</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>App</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>MinimumOSVersion</key>
  <string>12.0</string>
</dict>
</plist>
</file>

<file path="ios/Flutter/Debug.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
#include "Generated.xcconfig"
</file>

<file path="ios/Flutter/Release.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
#include "Generated.xcconfig"
</file>

<file path="ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "20x20",
      "idiom" : "iphone",
      "filename" : "Icon-App-20x20@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "iphone",
      "filename" : "Icon-App-29x29@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "iphone",
      "filename" : "Icon-App-40x40@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "60x60",
      "idiom" : "iphone",
      "filename" : "Icon-App-60x60@3x.png",
      "scale" : "3x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "20x20",
      "idiom" : "ipad",
      "filename" : "Icon-App-20x20@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "29x29",
      "idiom" : "ipad",
      "filename" : "Icon-App-29x29@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "40x40",
      "idiom" : "ipad",
      "filename" : "Icon-App-40x40@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@1x.png",
      "scale" : "1x"
    },
    {
      "size" : "76x76",
      "idiom" : "ipad",
      "filename" : "Icon-App-76x76@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "83.5x83.5",
      "idiom" : "ipad",
      "filename" : "Icon-App-83.5x83.5@2x.png",
      "scale" : "2x"
    },
    {
      "size" : "1024x1024",
      "idiom" : "ios-marketing",
      "filename" : "Icon-App-1024x1024@1x.png",
      "scale" : "1x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json">
{
  "images" : [
    {
      "idiom" : "universal",
      "filename" : "LaunchImage.png",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@2x.png",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "filename" : "LaunchImage@3x.png",
      "scale" : "3x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md">
# Launch Screen Assets

You can customize the launch screen with your own desired assets by replacing the image files in this directory.

You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
</file>

<file path="ios/Runner/Base.lproj/LaunchScreen.storyboard">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EHf-IW-A2E">
            <objects>
                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
                            </imageView>
                        </subviews>
                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                        <constraints>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="53" y="375"/>
        </scene>
    </scenes>
    <resources>
        <image name="LaunchImage" width="168" height="185"/>
    </resources>
</document>
</file>

<file path="ios/Runner/Base.lproj/Main.storyboard">
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
    </dependencies>
    <scenes>
        <!--Flutter View Controller-->
        <scene sceneID="tne-QT-ifu">
            <objects>
                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
            </objects>
        </scene>
    </scenes>
</document>
</file>

<file path="ios/Runner/AppDelegate.swift">
import Flutter
import UIKit

@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}
</file>

<file path="ios/Runner/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>LeadLawk</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>LeadLawk</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner/Runner-Bridging-Header.h">
#import "GeneratedPluginRegistrant.h"
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>
</file>

<file path="ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
               BuildableName = "Runner.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      customLLDBInitFile = "$(SRCROOT)/Flutter/ephemeral/flutter_lldbinit"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C8080294A63A400263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      customLLDBInitFile = "$(SRCROOT)/Flutter/ephemeral/flutter_lldbinit"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="ios/Runner.xcodeproj/project.pbxproj">
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
		331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C807B294A618700263BE5 /* RunnerTests.swift */; };
		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
		4384FE26E8FDEC6C04EDD9B6 /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = DFF1E82F86A01AF2F3BA8811 /* Pods_Runner.framework */; };
		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
		F66A9D8BFD8710360351DEA3 /* Pods_RunnerTests.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 80B2992EDC7F7FFF370FBAC5 /* Pods_RunnerTests.framework */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C8085294A63A400263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 97C146E61CF9000F007C117D /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 97C146ED1CF9000F007C117D;
			remoteInfo = Runner;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
		331C807B294A618700263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		331C8081294A63A400263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
		4B9CDD319FA1AC0A86DE349E /* Pods-RunnerTests.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.profile.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.profile.xcconfig"; sourceTree = "<group>"; };
		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
		7F144D1EBAE332F26C68AE0A /* Pods-RunnerTests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.release.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.release.xcconfig"; sourceTree = "<group>"; };
		80B2992EDC7F7FFF370FBAC5 /* Pods_RunnerTests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_RunnerTests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		8BC0CEE450F5FD1400FC3F29 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
		8F22E0B9B8CC2068AD4B6046 /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
		967D0ABB3E8E40FACCF01D1E /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		A041B346C05F013DC6420BCE /* Pods-RunnerTests.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.debug.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.debug.xcconfig"; sourceTree = "<group>"; };
		DFF1E82F86A01AF2F3BA8811 /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		97C146EB1CF9000F007C117D /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				4384FE26E8FDEC6C04EDD9B6 /* Pods_Runner.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		C5AD3F1738ECD8F5847D1D66 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F66A9D8BFD8710360351DEA3 /* Pods_RunnerTests.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C8082294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C807B294A618700263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		5A06B8504289300331DEF14F /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				DFF1E82F86A01AF2F3BA8811 /* Pods_Runner.framework */,
				80B2992EDC7F7FFF370FBAC5 /* Pods_RunnerTests.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		9740EEB11CF90186004384FC /* Flutter */ = {
			isa = PBXGroup;
			children = (
				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				9740EEB31CF90195004384FC /* Generated.xcconfig */,
			);
			name = Flutter;
			sourceTree = "<group>";
		};
		97C146E51CF9000F007C117D = {
			isa = PBXGroup;
			children = (
				9740EEB11CF90186004384FC /* Flutter */,
				97C146F01CF9000F007C117D /* Runner */,
				97C146EF1CF9000F007C117D /* Products */,
				331C8082294A63A400263BE5 /* RunnerTests */,
				CBDF75CD620F19AD15442567 /* Pods */,
				5A06B8504289300331DEF14F /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		97C146EF1CF9000F007C117D /* Products */ = {
			isa = PBXGroup;
			children = (
				97C146EE1CF9000F007C117D /* Runner.app */,
				331C8081294A63A400263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		97C146F01CF9000F007C117D /* Runner */ = {
			isa = PBXGroup;
			children = (
				97C146FA1CF9000F007C117D /* Main.storyboard */,
				97C146FD1CF9000F007C117D /* Assets.xcassets */,
				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
				97C147021CF9000F007C117D /* Info.plist */,
				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
		CBDF75CD620F19AD15442567 /* Pods */ = {
			isa = PBXGroup;
			children = (
				8BC0CEE450F5FD1400FC3F29 /* Pods-Runner.debug.xcconfig */,
				8F22E0B9B8CC2068AD4B6046 /* Pods-Runner.release.xcconfig */,
				967D0ABB3E8E40FACCF01D1E /* Pods-Runner.profile.xcconfig */,
				A041B346C05F013DC6420BCE /* Pods-RunnerTests.debug.xcconfig */,
				7F144D1EBAE332F26C68AE0A /* Pods-RunnerTests.release.xcconfig */,
				4B9CDD319FA1AC0A86DE349E /* Pods-RunnerTests.profile.xcconfig */,
			);
			name = Pods;
			path = Pods;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C8080294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				514CAA69B20AEA6E1EA9C525 /* [CP] Check Pods Manifest.lock */,
				331C807D294A63A400263BE5 /* Sources */,
				331C807F294A63A400263BE5 /* Resources */,
				C5AD3F1738ECD8F5847D1D66 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				331C8086294A63A400263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C8081294A63A400263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		97C146ED1CF9000F007C117D /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				130616262646E857FB02F589 /* [CP] Check Pods Manifest.lock */,
				9740EEB61CF901F6004384FC /* Run Script */,
				97C146EA1CF9000F007C117D /* Sources */,
				97C146EB1CF9000F007C117D /* Frameworks */,
				97C146EC1CF9000F007C117D /* Resources */,
				9705A1C41CF9048500538489 /* Embed Frameworks */,
				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
				8015C2E78C33F3A088096892 /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Runner;
			productName = Runner;
			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		97C146E61CF9000F007C117D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C8080294A63A400263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 97C146ED1CF9000F007C117D;
					};
					97C146ED1CF9000F007C117D = {
						CreatedOnToolsVersion = 7.3.1;
						LastSwiftMigration = 1100;
					};
				};
			};
			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 97C146E51CF9000F007C117D;
			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				97C146ED1CF9000F007C117D /* Runner */,
				331C8080294A63A400263BE5 /* RunnerTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C807F294A63A400263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EC1CF9000F007C117D /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		130616262646E857FB02F589 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${TARGET_BUILD_DIR}/${INFOPLIST_PATH}",
			);
			name = "Thin Binary";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
		};
		514CAA69B20AEA6E1EA9C525 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-RunnerTests-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		8015C2E78C33F3A088096892 /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
		9740EEB61CF901F6004384FC /* Run Script */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Run Script";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C807D294A63A400263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EA1CF9000F007C117D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C8086294A63A400263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 97C146ED1CF9000F007C117D /* Runner */;
			targetProxy = 331C8085294A63A400263BE5 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C146FB1CF9000F007C117D /* Base */,
			);
			name = Main.storyboard;
			sourceTree = "<group>";
		};
		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C147001CF9000F007C117D /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		249021D3217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Profile;
		};
		249021D4217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				DEVELOPMENT_TEAM = 98D7QBA686;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Profile;
		};
		331C8088294A63A400263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = A041B346C05F013DC6420BCE /* Pods-RunnerTests.debug.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Debug;
		};
		331C8089294A63A400263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7F144D1EBAE332F26C68AE0A /* Pods-RunnerTests.release.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Release;
		};
		331C808A294A63A400263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 4B9CDD319FA1AC0A86DE349E /* Pods-RunnerTests.profile.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Profile;
		};
		97C147031CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		97C147041CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		97C147061CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				DEVELOPMENT_TEAM = 98D7QBA686;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		97C147071CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				DEVELOPMENT_TEAM = 98D7QBA686;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C8088294A63A400263BE5 /* Debug */,
				331C8089294A63A400263BE5 /* Release */,
				331C808A294A63A400263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147031CF9000F007C117D /* Debug */,
				97C147041CF9000F007C117D /* Release */,
				249021D3217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147061CF9000F007C117D /* Debug */,
				97C147071CF9000F007C117D /* Release */,
				249021D4217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 97C146E61CF9000F007C117D /* Project object */;
}
</file>

<file path="ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>
</file>

<file path="ios/RunnerTests/RunnerTests.swift">
import Flutter
import UIKit
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}
</file>

<file path="ios/.gitignore">
**/dgph
*.mode1v3
*.mode2v3
*.moved-aside
*.pbxuser
*.perspectivev3
**/*sync/
.sconsign.dblite
.tags*
**/.vagrant/
**/DerivedData/
Icon?
**/Pods/
**/.symlinks/
profile
xcuserdata
**/.generated/
Flutter/App.framework
Flutter/Flutter.framework
Flutter/Flutter.podspec
Flutter/Generated.xcconfig
Flutter/ephemeral/
Flutter/app.flx
Flutter/app.zip
Flutter/flutter_assets/
Flutter/flutter_export_environment.sh
ServiceDefinitions.json
Runner/GeneratedPluginRegistrant.*

# Exceptions to above rules.
!default.mode1v3
!default.mode2v3
!default.pbxuser
!default.perspectivev3
</file>

<file path="ios/Podfile">
# Uncomment this line to define a global platform for your project
# platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
end
</file>

<file path="ios/Podfile.lock">
PODS:
  - Flutter (1.0.0)
  - shared_preferences_foundation (0.0.1):
    - Flutter
    - FlutterMacOS
  - url_launcher_ios (0.0.1):
    - Flutter

DEPENDENCIES:
  - Flutter (from `Flutter`)
  - shared_preferences_foundation (from `.symlinks/plugins/shared_preferences_foundation/darwin`)
  - url_launcher_ios (from `.symlinks/plugins/url_launcher_ios/ios`)

EXTERNAL SOURCES:
  Flutter:
    :path: Flutter
  shared_preferences_foundation:
    :path: ".symlinks/plugins/shared_preferences_foundation/darwin"
  url_launcher_ios:
    :path: ".symlinks/plugins/url_launcher_ios/ios"

SPEC CHECKSUMS:
  Flutter: e0871f40cf51350855a761d2e70bf5af5b9b5de7
  shared_preferences_foundation: 9e1978ff2562383bd5676f64ec4e9aa8fa06a6f7
  url_launcher_ios: 694010445543906933d732453a59da0a173ae33d

PODFILE CHECKSUM: 4305caec6b40dde0ae97be1573c53de1882a07e5

COCOAPODS: 1.16.2
</file>

<file path="lib/core/error/failures.dart">
import 'package:equatable/equatable.dart';

abstract class Failure extends Equatable {
  final String message;
  const Failure(this.message);

  @override
  List<Object> get props => [message];
}

class ServerFailure extends Failure {
  const ServerFailure(super.message);
}

class CacheFailure extends Failure {
  const CacheFailure(super.message);
}

class NetworkFailure extends Failure {
  const NetworkFailure(super.message);
}
</file>

<file path="lib/core/theme/app_theme.dart">
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class AppTheme {
  static const Color primaryBlue = Color(0xFF2563EB);
  static const Color primaryIndigo = Color(0xFF4F46E5);
  static const Color accentPurple = Color(0xFF7C3AED);
  static const Color successGreen = Color(0xFF10B981);
  static const Color warningOrange = Color(0xFFF59E0B);
  static const Color errorRed = Color(0xFFEF4444);
  static const Color darkGray = Color(0xFF1F2937);
  static const Color mediumGray = Color(0xFF6B7280);
  static const Color lightGray = Color(0xFFF3F4F6);
  static const Color backgroundGray = Color(0xFFF9FAFB);
  
  static ThemeData lightTheme() {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.light(
        primary: primaryIndigo,
        secondary: accentPurple,
        surface: Colors.white,
        background: backgroundGray,
        error: errorRed,
        onPrimary: Colors.white,
        onSecondary: Colors.white,
        onSurface: darkGray,
        onBackground: darkGray,
        onError: Colors.white,
      ),
      scaffoldBackgroundColor: backgroundGray,
      appBarTheme: AppBarTheme(
        elevation: 0,
        backgroundColor: Colors.white,
        foregroundColor: darkGray,
        systemOverlayStyle: SystemUiOverlayStyle.dark,
        titleTextStyle: const TextStyle(
          color: darkGray,
          fontSize: 20,
          fontWeight: FontWeight.w600,
          letterSpacing: -0.5,
        ),
      ),
      cardTheme: CardThemeData(
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
          side: BorderSide(color: Colors.grey.shade200),
        ),
        color: Colors.white,
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          elevation: 0,
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
      chipTheme: ChipThemeData(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        selectedColor: primaryIndigo.withOpacity(0.15),
        backgroundColor: lightGray,
        labelStyle: const TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w500,
        ),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: Colors.white,
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: primaryIndigo, width: 2),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: errorRed),
        ),
        labelStyle: TextStyle(color: mediumGray),
        hintStyle: TextStyle(color: mediumGray.withOpacity(0.7)),
      ),
      textTheme: const TextTheme(
        displayLarge: TextStyle(
          fontSize: 32,
          fontWeight: FontWeight.w700,
          letterSpacing: -1.5,
          color: darkGray,
        ),
        displayMedium: TextStyle(
          fontSize: 28,
          fontWeight: FontWeight.w600,
          letterSpacing: -1,
          color: darkGray,
        ),
        displaySmall: TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.w600,
          letterSpacing: -0.5,
          color: darkGray,
        ),
        headlineMedium: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.w600,
          letterSpacing: -0.5,
          color: darkGray,
        ),
        titleLarge: TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.w600,
          color: darkGray,
        ),
        titleMedium: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w500,
          color: darkGray,
        ),
        bodyLarge: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w400,
          color: darkGray,
        ),
        bodyMedium: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w400,
          color: mediumGray,
        ),
        labelLarge: TextStyle(
          fontSize: 14,
          fontWeight: FontWeight.w500,
          color: darkGray,
        ),
      ),
      dividerTheme: DividerThemeData(
        color: Colors.grey.shade200,
        thickness: 1,
      ),
    );
  }
  
  static BoxShadow cardShadow = BoxShadow(
    color: Colors.black.withOpacity(0.04),
    blurRadius: 10,
    offset: const Offset(0, 2),
  );
  
  static BoxShadow elevatedShadow = BoxShadow(
    color: Colors.black.withOpacity(0.08),
    blurRadius: 20,
    offset: const Offset(0, 4),
  );
}
</file>

<file path="lib/features/leads/data/datasources/leads_remote_datasource.dart">
import 'package:dio/dio.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import '../models/lead_model.dart';
import '../../domain/usecases/run_scrape_usecase.dart';

abstract class LeadsRemoteDataSource {
  Future<List<LeadModel>> getLeads({
    String? status,
    String? search,
    bool? candidatesOnly,
  });
  Future<LeadModel> getLead(String id);
  Future<LeadModel> updateLead(LeadModel lead);
  Future<String> startScrape(RunScrapeParams params);
  Future<Map<String, dynamic>> getJobStatus(String jobId);
}

class LeadsRemoteDataSourceImpl implements LeadsRemoteDataSource {
  final Dio dio;
  final String baseUrl;

  LeadsRemoteDataSourceImpl({
    required this.dio,
    String? baseUrl,
  }) : baseUrl = baseUrl ?? dotenv.env['BASE_URL'] ?? 'http://localhost:8000';

  @override
  Future<List<LeadModel>> getLeads({
    String? status,
    String? search,
    bool? candidatesOnly,
  }) async {
    try {
      final queryParams = <String, dynamic>{};
      if (status != null) queryParams['status'] = status;
      if (search != null) queryParams['search'] = search;
      if (candidatesOnly == true) queryParams['candidates_only'] = true;

      final response = await dio.get(
        '$baseUrl/leads',
        queryParameters: queryParams,
      );

      return (response.data as List)
          .map((json) => LeadModel.fromJson(json))
          .toList();
    } on DioException catch (e) {
      throw Exception('Failed to get leads: ${e.message}');
    }
  }

  @override
  Future<LeadModel> getLead(String id) async {
    try {
      final response = await dio.get('$baseUrl/leads/$id');
      return LeadModel.fromJson(response.data);
    } on DioException catch (e) {
      throw Exception('Failed to get lead: ${e.message}');
    }
  }

  @override
  Future<LeadModel> updateLead(LeadModel lead) async {
    try {
      final response = await dio.put(
        '$baseUrl/leads/${lead.id}',
        data: lead.toJson(),
      );
      return LeadModel.fromJson(response.data);
    } on DioException catch (e) {
      throw Exception('Failed to update lead: ${e.message}');
    }
  }

  @override
  Future<String> startScrape(RunScrapeParams params) async {
    try {
      final response = await dio.post(
        '$baseUrl/jobs/scrape',
        data: {
          'industry': params.industry,
          'location': params.location,
          'limit': params.limit,
          'min_rating': params.minRating,
          'min_reviews': params.minReviews,
          'recent_days': params.recentDays,
        },
      );
      return response.data['job_id'];
    } on DioException catch (e) {
      throw Exception('Failed to start scrape: ${e.message}');
    }
  }

  @override
  Future<Map<String, dynamic>> getJobStatus(String jobId) async {
    try {
      final response = await dio.get('$baseUrl/jobs/$jobId');
      return response.data;
    } on DioException catch (e) {
      throw Exception('Failed to get job status: ${e.message}');
    }
  }
}
</file>

<file path="lib/features/leads/data/datasources/websocket_service.dart">
import 'dart:async';
import 'dart:convert';
import 'package:web_socket_channel/web_socket_channel.dart';

class WebSocketService {
  WebSocketChannel? _channel;
  final _logController = StreamController<String>.broadcast();
  final _statusController = StreamController<Map<String, dynamic>>.broadcast();
  
  Stream<String> get logs => _logController.stream;
  Stream<Map<String, dynamic>> get status => _statusController.stream;
  
  void connect(String jobId) {
    final uri = Uri.parse('ws://localhost:8000/ws/jobs/$jobId');
    _channel = WebSocketChannel.connect(uri);
    
    _channel!.stream.listen(
      (data) {
        final message = jsonDecode(data);
        if (message['type'] == 'log') {
          _logController.add(message['message']);
        } else if (message['type'] == 'status') {
          _statusController.add(message['data']);
        }
      },
      onError: (error) {
        print('WebSocket error: $error');
      },
      onDone: () {
        print('WebSocket connection closed');
      },
    );
  }
  
  void disconnect() {
    _channel?.sink.close();
    _channel = null;
  }
  
  void dispose() {
    _logController.close();
    _statusController.close();
    disconnect();
  }
}
</file>

<file path="lib/features/leads/data/models/lead_model.dart">
import 'package:json_annotation/json_annotation.dart';
import '../../domain/entities/lead.dart';

part 'lead_model.g.dart';

@JsonSerializable()
class LeadModel {
  final String id;
  @JsonKey(name: 'business_name')
  final String businessName;
  final String phone;
  @JsonKey(name: 'website_url')
  final String? websiteUrl;
  @JsonKey(name: 'profile_url')
  final String? profileUrl;
  final double? rating;
  @JsonKey(name: 'review_count')
  final int? reviewCount;
  @JsonKey(name: 'last_review_date')
  final DateTime? lastReviewDate;
  @JsonKey(name: 'platform_hint')
  final String? platformHint;
  final String industry;
  final String location;
  final String source;
  @JsonKey(name: 'has_website')
  final bool hasWebsite;
  @JsonKey(name: 'meets_rating_threshold')
  final bool meetsRatingThreshold;
  @JsonKey(name: 'has_recent_reviews')
  final bool hasRecentReviews;
  @JsonKey(name: 'is_candidate')
  final bool isCandidate;
  final String status;
  final String? notes;
  @JsonKey(name: 'created_at')
  final DateTime createdAt;
  @JsonKey(name: 'updated_at')
  final DateTime updatedAt;

  LeadModel({
    required this.id,
    required this.businessName,
    required this.phone,
    this.websiteUrl,
    this.profileUrl,
    this.rating,
    this.reviewCount,
    this.lastReviewDate,
    this.platformHint,
    required this.industry,
    required this.location,
    required this.source,
    required this.hasWebsite,
    required this.meetsRatingThreshold,
    required this.hasRecentReviews,
    required this.isCandidate,
    required this.status,
    this.notes,
    required this.createdAt,
    required this.updatedAt,
  });

  factory LeadModel.fromJson(Map<String, dynamic> json) =>
      _$LeadModelFromJson(json);

  Map<String, dynamic> toJson() => _$LeadModelToJson(this);

  Lead toEntity() {
    return Lead(
      id: id,
      businessName: businessName,
      phone: phone,
      websiteUrl: websiteUrl,
      profileUrl: profileUrl,
      rating: rating,
      reviewCount: reviewCount,
      lastReviewDate: lastReviewDate,
      platformHint: platformHint,
      industry: industry,
      location: location,
      source: source,
      hasWebsite: hasWebsite,
      meetsRatingThreshold: meetsRatingThreshold,
      hasRecentReviews: hasRecentReviews,
      isCandidate: isCandidate,
      status: _statusFromString(status),
      notes: notes,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }

  static LeadModel fromEntity(Lead lead) {
    return LeadModel(
      id: lead.id,
      businessName: lead.businessName,
      phone: lead.phone,
      websiteUrl: lead.websiteUrl,
      profileUrl: lead.profileUrl,
      rating: lead.rating,
      reviewCount: lead.reviewCount,
      lastReviewDate: lead.lastReviewDate,
      platformHint: lead.platformHint,
      industry: lead.industry,
      location: lead.location,
      source: lead.source,
      hasWebsite: lead.hasWebsite,
      meetsRatingThreshold: lead.meetsRatingThreshold,
      hasRecentReviews: lead.hasRecentReviews,
      isCandidate: lead.isCandidate,
      status: _statusToString(lead.status),
      notes: lead.notes,
      createdAt: lead.createdAt,
      updatedAt: lead.updatedAt,
    );
  }

  static LeadStatus _statusFromString(String status) {
    switch (status) {
      case 'new':
        return LeadStatus.new_;
      case 'called':
        return LeadStatus.called;
      case 'interested':
        return LeadStatus.interested;
      case 'converted':
        return LeadStatus.converted;
      case 'dnc':
        return LeadStatus.dnc;
      default:
        return LeadStatus.new_;
    }
  }

  static String _statusToString(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return 'new';
      case LeadStatus.called:
        return 'called';
      case LeadStatus.interested:
        return 'interested';
      case LeadStatus.converted:
        return 'converted';
      case LeadStatus.dnc:
        return 'dnc';
    }
  }
}
</file>

<file path="lib/features/leads/data/models/lead_model.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'lead_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

LeadModel _$LeadModelFromJson(Map<String, dynamic> json) => LeadModel(
      id: json['id'] as String,
      businessName: json['business_name'] as String,
      phone: json['phone'] as String,
      websiteUrl: json['website_url'] as String?,
      profileUrl: json['profile_url'] as String?,
      rating: (json['rating'] as num?)?.toDouble(),
      reviewCount: (json['review_count'] as num?)?.toInt(),
      lastReviewDate: json['last_review_date'] == null
          ? null
          : DateTime.parse(json['last_review_date'] as String),
      platformHint: json['platform_hint'] as String?,
      industry: json['industry'] as String,
      location: json['location'] as String,
      source: json['source'] as String,
      hasWebsite: json['has_website'] as bool,
      meetsRatingThreshold: json['meets_rating_threshold'] as bool,
      hasRecentReviews: json['has_recent_reviews'] as bool,
      isCandidate: json['is_candidate'] as bool,
      status: json['status'] as String,
      notes: json['notes'] as String?,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
    );

Map<String, dynamic> _$LeadModelToJson(LeadModel instance) => <String, dynamic>{
      'id': instance.id,
      'business_name': instance.businessName,
      'phone': instance.phone,
      'website_url': instance.websiteUrl,
      'profile_url': instance.profileUrl,
      'rating': instance.rating,
      'review_count': instance.reviewCount,
      'last_review_date': instance.lastReviewDate?.toIso8601String(),
      'platform_hint': instance.platformHint,
      'industry': instance.industry,
      'location': instance.location,
      'source': instance.source,
      'has_website': instance.hasWebsite,
      'meets_rating_threshold': instance.meetsRatingThreshold,
      'has_recent_reviews': instance.hasRecentReviews,
      'is_candidate': instance.isCandidate,
      'status': instance.status,
      'notes': instance.notes,
      'created_at': instance.createdAt.toIso8601String(),
      'updated_at': instance.updatedAt.toIso8601String(),
    };
</file>

<file path="lib/features/leads/data/repositories/leads_repository_impl.dart">
import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../../domain/entities/job.dart';
import '../../domain/entities/lead.dart';
import '../../domain/repositories/leads_repository.dart';
import '../../domain/usecases/run_scrape_usecase.dart';
import '../datasources/leads_remote_datasource.dart';
import '../models/lead_model.dart';

class LeadsRepositoryImpl implements LeadsRepository {
  final LeadsRemoteDataSource remoteDataSource;

  LeadsRepositoryImpl({required this.remoteDataSource});

  @override
  Future<Either<Failure, List<Lead>>> getLeads({
    String? status,
    String? search,
    bool? candidatesOnly,
  }) async {
    try {
      final leadModels = await remoteDataSource.getLeads(
        status: status,
        search: search,
        candidatesOnly: candidatesOnly,
      );
      final leads = leadModels.map((model) => model.toEntity()).toList();
      return Right(leads);
    } catch (e) {
      return Left(ServerFailure(e.toString()));
    }
  }

  @override
  Future<Either<Failure, Lead>> getLead(String id) async {
    try {
      final leadModel = await remoteDataSource.getLead(id);
      return Right(leadModel.toEntity());
    } catch (e) {
      return Left(ServerFailure(e.toString()));
    }
  }

  @override
  Future<Either<Failure, Lead>> updateLead(Lead lead) async {
    try {
      final leadModel = LeadModel.fromEntity(lead);
      final updatedModel = await remoteDataSource.updateLead(leadModel);
      return Right(updatedModel.toEntity());
    } catch (e) {
      return Left(ServerFailure(e.toString()));
    }
  }

  @override
  Future<Either<Failure, String>> startScrape(RunScrapeParams params) async {
    try {
      final jobId = await remoteDataSource.startScrape(params);
      return Right(jobId);
    } catch (e) {
      return Left(ServerFailure(e.toString()));
    }
  }

  @override
  Stream<Job> watchJob(String jobId) async* {
    while (true) {
      try {
        final data = await remoteDataSource.getJobStatus(jobId);
        final status = _parseJobStatus(data['status']);
        
        yield Job(
          id: jobId,
          status: status,
          processed: data['processed'] ?? 0,
          total: data['total'] ?? 0,
          message: data['message'],
        );

        if (status == JobStatus.done || status == JobStatus.error) {
          break;
        }

        await Future.delayed(const Duration(seconds: 1));
      } catch (e) {
        yield Job(
          id: jobId,
          status: JobStatus.error,
          processed: 0,
          total: 0,
          message: e.toString(),
        );
        break;
      }
    }
  }

  JobStatus _parseJobStatus(String? status) {
    switch (status) {
      case 'running':
        return JobStatus.running;
      case 'done':
        return JobStatus.done;
      case 'error':
        return JobStatus.error;
      default:
        return JobStatus.running;
    }
  }
}
</file>

<file path="lib/features/leads/domain/entities/job.dart">
import 'package:equatable/equatable.dart';

enum JobStatus { running, done, error }

class Job extends Equatable {
  final String id;
  final JobStatus status;
  final int processed;
  final int total;
  final String? message;

  const Job({
    required this.id,
    required this.status,
    required this.processed,
    required this.total,
    this.message,
  });

  @override
  List<Object?> get props => [id, status, processed, total, message];
}
</file>

<file path="lib/features/leads/domain/entities/lead.dart">
import 'package:equatable/equatable.dart';

enum LeadStatus { new_, called, interested, converted, dnc }

class Lead extends Equatable {
  final String id;
  final String businessName;
  final String phone;
  final String? websiteUrl;
  final String? profileUrl;
  final double? rating;
  final int? reviewCount;
  final DateTime? lastReviewDate;
  final String? platformHint;
  final String industry;
  final String location;
  final String source;
  final bool hasWebsite;
  final bool meetsRatingThreshold;
  final bool hasRecentReviews;
  final bool isCandidate;
  final LeadStatus status;
  final String? notes;
  final DateTime createdAt;
  final DateTime updatedAt;

  const Lead({
    required this.id,
    required this.businessName,
    required this.phone,
    this.websiteUrl,
    this.profileUrl,
    this.rating,
    this.reviewCount,
    this.lastReviewDate,
    this.platformHint,
    required this.industry,
    required this.location,
    required this.source,
    required this.hasWebsite,
    required this.meetsRatingThreshold,
    required this.hasRecentReviews,
    required this.isCandidate,
    required this.status,
    this.notes,
    required this.createdAt,
    required this.updatedAt,
  });

  Lead copyWith({
    String? id,
    String? businessName,
    String? phone,
    String? websiteUrl,
    String? profileUrl,
    double? rating,
    int? reviewCount,
    DateTime? lastReviewDate,
    String? platformHint,
    String? industry,
    String? location,
    String? source,
    bool? hasWebsite,
    bool? meetsRatingThreshold,
    bool? hasRecentReviews,
    bool? isCandidate,
    LeadStatus? status,
    String? notes,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return Lead(
      id: id ?? this.id,
      businessName: businessName ?? this.businessName,
      phone: phone ?? this.phone,
      websiteUrl: websiteUrl ?? this.websiteUrl,
      profileUrl: profileUrl ?? this.profileUrl,
      rating: rating ?? this.rating,
      reviewCount: reviewCount ?? this.reviewCount,
      lastReviewDate: lastReviewDate ?? this.lastReviewDate,
      platformHint: platformHint ?? this.platformHint,
      industry: industry ?? this.industry,
      location: location ?? this.location,
      source: source ?? this.source,
      hasWebsite: hasWebsite ?? this.hasWebsite,
      meetsRatingThreshold: meetsRatingThreshold ?? this.meetsRatingThreshold,
      hasRecentReviews: hasRecentReviews ?? this.hasRecentReviews,
      isCandidate: isCandidate ?? this.isCandidate,
      status: status ?? this.status,
      notes: notes ?? this.notes,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  List<Object?> get props => [
        id,
        businessName,
        phone,
        websiteUrl,
        profileUrl,
        rating,
        reviewCount,
        lastReviewDate,
        platformHint,
        industry,
        location,
        source,
        hasWebsite,
        meetsRatingThreshold,
        hasRecentReviews,
        isCandidate,
        status,
        notes,
        createdAt,
        updatedAt,
      ];
}
</file>

<file path="lib/features/leads/domain/repositories/leads_repository.dart">
import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../entities/job.dart';
import '../entities/lead.dart';
import '../usecases/run_scrape_usecase.dart';

abstract class LeadsRepository {
  Future<Either<Failure, List<Lead>>> getLeads({
    String? status,
    String? search,
    bool? candidatesOnly,
  });
  
  Future<Either<Failure, Lead>> getLead(String id);
  
  Future<Either<Failure, Lead>> updateLead(Lead lead);
  
  Future<Either<Failure, String>> startScrape(RunScrapeParams params);
  
  Stream<Job> watchJob(String jobId);
}
</file>

<file path="lib/features/leads/domain/usecases/run_scrape_usecase.dart">
import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import '../../../../core/error/failures.dart';
import '../repositories/leads_repository.dart';

class RunScrapeParams extends Equatable {
  final String industry;
  final String location;
  final int limit;
  final double minRating;
  final int minReviews;
  final int recentDays;

  const RunScrapeParams({
    required this.industry,
    required this.location,
    required this.limit,
    required this.minRating,
    required this.minReviews,
    required this.recentDays,
  });

  @override
  List<Object> get props => [
        industry,
        location,
        limit,
        minRating,
        minReviews,
        recentDays,
      ];
}

class RunScrapeUseCase {
  final LeadsRepository repository;

  RunScrapeUseCase(this.repository);

  Future<Either<Failure, String>> call(RunScrapeParams params) async {
    return await repository.startScrape(params);
  }
}
</file>

<file path="lib/features/leads/presentation/pages/lead_detail_page.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:url_launcher/url_launcher.dart';
import '../../domain/entities/lead.dart';
import '../providers/job_provider.dart';

final leadDetailProvider = FutureProvider.family<Lead, String>(
  (ref, id) async {
    final repository = ref.watch(leadsRepositoryProvider);
    final result = await repository.getLead(id);
    return result.fold(
      (failure) => throw Exception(failure.message),
      (lead) => lead,
    );
  },
);

class LeadDetailPage extends ConsumerStatefulWidget {
  final String leadId;

  const LeadDetailPage({super.key, required this.leadId});

  @override
  ConsumerState<LeadDetailPage> createState() => _LeadDetailPageState();
}

class _LeadDetailPageState extends ConsumerState<LeadDetailPage> {
  final _notesController = TextEditingController();
  bool _isEditingNotes = false;

  Color _getStatusColor(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return Colors.grey;
      case LeadStatus.called:
        return Colors.orange;
      case LeadStatus.interested:
        return Colors.blue;
      case LeadStatus.converted:
        return Colors.green;
      case LeadStatus.dnc:
        return Colors.black;
    }
  }

  String _getStatusLabel(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return 'NEW';
      case LeadStatus.called:
        return 'CALLED';
      case LeadStatus.interested:
        return 'INTERESTED';
      case LeadStatus.converted:
        return 'CONVERTED';
      case LeadStatus.dnc:
        return 'DNC';
    }
  }

  Future<void> _updateStatus(Lead lead, LeadStatus newStatus) async {
    final repository = ref.read(leadsRepositoryProvider);
    final updatedLead = lead.copyWith(status: newStatus);
    await repository.updateLead(updatedLead);
    ref.invalidate(leadDetailProvider(widget.leadId));
  }

  Future<void> _updateNotes(Lead lead) async {
    final repository = ref.read(leadsRepositoryProvider);
    final updatedLead = lead.copyWith(notes: _notesController.text);
    await repository.updateLead(updatedLead);
    setState(() => _isEditingNotes = false);
    ref.invalidate(leadDetailProvider(widget.leadId));
  }

  Future<void> _launchPhone(String phone) async {
    final uri = Uri.parse('tel:$phone');
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri);
    }
  }

  Future<void> _launchUrl(String url) async {
    final uri = Uri.parse(url.startsWith('http') ? url : 'https://$url');
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri);
    }
  }

  @override
  void dispose() {
    _notesController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final leadAsync = ref.watch(leadDetailProvider(widget.leadId));

    return Scaffold(
      appBar: AppBar(
        title: const Text('Lead Details'),
        elevation: 2,
      ),
      body: leadAsync.when(
        data: (lead) {
          if (!_isEditingNotes) {
            _notesController.text = lead.notes ?? '';
          }

          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                lead.businessName,
                                style: Theme.of(context).textTheme.headlineSmall,
                              ),
                            ),
                            Chip(
                              label: Text(
                                _getStatusLabel(lead.status),
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              backgroundColor: _getStatusColor(lead.status),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        _buildInfoRow(Icons.phone, lead.phone, () => _launchPhone(lead.phone)),
                        if (lead.websiteUrl != null)
                          _buildInfoRow(Icons.language, lead.websiteUrl!, () => _launchUrl(lead.websiteUrl!)),
                        if (lead.profileUrl != null)
                          _buildInfoRow(Icons.link, 'Google Maps Profile', () => _launchUrl(lead.profileUrl!)),
                        _buildInfoRow(Icons.location_on, lead.location),
                        _buildInfoRow(Icons.business, lead.industry.toUpperCase()),
                        if (lead.rating != null)
                          _buildInfoRow(
                            Icons.star,
                            '${lead.rating!.toStringAsFixed(1)} stars (${lead.reviewCount ?? 0} reviews)',
                          ),
                        if (lead.platformHint != null)
                          _buildInfoRow(Icons.info_outline, 'Platform: ${lead.platformHint}'),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Quick Actions',
                          style: Theme.of(context).textTheme.titleMedium,
                        ),
                        const SizedBox(height: 16),
                        Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: LeadStatus.values.map((status) {
                            return ElevatedButton(
                              onPressed: lead.status == status
                                  ? null
                                  : () => _updateStatus(lead, status),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: _getStatusColor(status),
                                foregroundColor: Colors.white,
                              ),
                              child: Text(_getStatusLabel(status)),
                            );
                          }).toList(),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: Text(
                                'Notes',
                                style: Theme.of(context).textTheme.titleMedium,
                              ),
                            ),
                            IconButton(
                              icon: Icon(_isEditingNotes ? Icons.check : Icons.edit),
                              onPressed: () {
                                if (_isEditingNotes) {
                                  _updateNotes(lead);
                                } else {
                                  setState(() => _isEditingNotes = true);
                                }
                              },
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        if (_isEditingNotes)
                          TextField(
                            controller: _notesController,
                            maxLines: 5,
                            decoration: const InputDecoration(
                              hintText: 'Add notes...',
                              border: OutlineInputBorder(),
                            ),
                          )
                        else
                          Text(
                            lead.notes?.isNotEmpty == true
                                ? lead.notes!
                                : 'No notes yet',
                            style: TextStyle(
                              color: lead.notes?.isNotEmpty == true
                                  ? null
                                  : Colors.grey,
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Qualification Flags',
                          style: Theme.of(context).textTheme.titleMedium,
                        ),
                        const SizedBox(height: 16),
                        _buildFlagRow('Has Website', lead.hasWebsite),
                        _buildFlagRow('Meets Rating Threshold', lead.meetsRatingThreshold),
                        _buildFlagRow('Has Recent Reviews', lead.hasRecentReviews),
                        _buildFlagRow('Is Candidate', lead.isCandidate),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(
          child: Text('Error: $error'),
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String text, [VoidCallback? onTap]) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: InkWell(
        onTap: onTap,
        child: Row(
          children: [
            Icon(icon, size: 20, color: Colors.grey),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                text,
                style: TextStyle(
                  decoration: onTap != null ? TextDecoration.underline : null,
                  color: onTap != null ? Colors.blue : null,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFlagRow(String label, bool value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(
            value ? Icons.check_circle : Icons.cancel,
            size: 20,
            color: value ? Colors.green : Colors.red,
          ),
          const SizedBox(width: 8),
          Text(label),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/leads/presentation/pages/leads_list_page_v2.dart">
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../../core/theme/app_theme.dart';
import '../../domain/entities/lead.dart';
import '../providers/job_provider.dart';
import '../providers/server_status_provider.dart';
import '../widgets/loading_state.dart';
import '../widgets/empty_state.dart';

final leadsProvider = FutureProvider.autoDispose<List<Lead>>(
  (ref) async {
    final repository = ref.watch(leadsRepositoryProvider);
    
    // Get filter parameters from dedicated providers
    final status = ref.watch(statusFilterProvider);
    final search = ref.watch(searchFilterProvider);
    final candidatesOnly = ref.watch(candidatesOnlyProvider);
    
    final result = await repository.getLeads(
      status: status,
      search: search.isEmpty ? null : search,
      candidatesOnly: candidatesOnly,
    );
    
    return result.fold(
      (failure) => throw Exception(failure.message),
      (leads) => leads,
    );
  },
);

// Dedicated providers for filters to prevent unnecessary rebuilds
final statusFilterProvider = StateProvider<String?>((ref) => null);
final searchFilterProvider = StateProvider<String>((ref) => '');
final candidatesOnlyProvider = StateProvider<bool>((ref) => false);

class LeadsListPageV2 extends ConsumerStatefulWidget {
  final String? initialFilter;

  const LeadsListPageV2({super.key, this.initialFilter});

  @override
  ConsumerState<LeadsListPageV2> createState() => _LeadsListPageV2State();
}

class _LeadsListPageV2State extends ConsumerState<LeadsListPageV2> {
  final _searchController = TextEditingController();
  String? _lastIndustry;
  String? _lastLocation;
  final List<String> _loadingLogs = [];
  Timer? _debounceTimer;

  @override
  void initState() {
    super.initState();
    if (widget.initialFilter == 'candidates') {
      Future.microtask(() {
        ref.read(candidatesOnlyProvider.notifier).state = true;
      });
    }
    _loadLastScrapeContext();
    _addLoadingLog('Initializing LeadLoq...');
    
    // Set up search debouncing
    _searchController.addListener(_onSearchChanged);
  }

  void _addLoadingLog(String log) {
    if (mounted) {
      setState(() {
        _loadingLogs.add(log);
        if (_loadingLogs.length > 5) {
          _loadingLogs.removeAt(0);
        }
      });
    }
  }

  Future<void> _loadLastScrapeContext() async {
    _addLoadingLog('Loading user preferences...');
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _lastIndustry = prefs.getString('last_industry');
      _lastLocation = prefs.getString('last_location');
    });
    _addLoadingLog('Preferences loaded successfully');
  }

  void _onSearchChanged() {
    _debounceTimer?.cancel();
    _debounceTimer = Timer(const Duration(milliseconds: 500), () {
      if (mounted) {
        ref.read(searchFilterProvider.notifier).state = _searchController.text;
      }
    });
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    _searchController.dispose();
    super.dispose();
  }

  Color _getStatusColor(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return AppTheme.mediumGray;
      case LeadStatus.called:
        return AppTheme.warningOrange;
      case LeadStatus.interested:
        return AppTheme.primaryBlue;
      case LeadStatus.converted:
        return AppTheme.successGreen;
      case LeadStatus.dnc:
        return AppTheme.darkGray;
    }
  }

  String _getStatusLabel(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return 'NEW';
      case LeadStatus.called:
        return 'CALLED';
      case LeadStatus.interested:
        return 'INTERESTED';
      case LeadStatus.converted:
        return 'CONVERTED';
      case LeadStatus.dnc:
        return 'DNC';
    }
  }

  IconData _getStatusIcon(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return Icons.fiber_new;
      case LeadStatus.called:
        return Icons.phone_in_talk;
      case LeadStatus.interested:
        return Icons.star;
      case LeadStatus.converted:
        return Icons.check_circle;
      case LeadStatus.dnc:
        return Icons.block;
    }
  }

  @override
  Widget build(BuildContext context) {
    final leadsAsync = ref.watch(leadsProvider);
    final serverState = ref.watch(serverStatusProvider);
    final statusFilter = ref.watch(statusFilterProvider);
    final candidatesOnly = ref.watch(candidatesOnlyProvider);

    // Add server status to logs
    if (serverState.status == ServerStatus.checking) {
      _addLoadingLog('Checking server connection...');
    } else if (serverState.status == ServerStatus.online) {
      _addLoadingLog('Server connected successfully');
    } else if (serverState.status == ServerStatus.starting) {
      _addLoadingLog('Starting server...');
    }

    return Scaffold(
      backgroundColor: AppTheme.backgroundGray,
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            expandedHeight: 200,
            floating: false,
            pinned: true,
            backgroundColor: Colors.white,
            elevation: 0,
            flexibleSpace: FlexibleSpaceBar(
              title: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Image.asset(
                    'assets/images/LeadLoq-logo.png',
                    height: 24,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'LeadLoq',
                    style: TextStyle(
                      color: AppTheme.darkGray,
                      fontWeight: FontWeight.w700,
                      letterSpacing: -0.5,
                    ),
                  ),
                ],
              ),
              background: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      AppTheme.primaryIndigo.withOpacity(0.05),
                      Colors.white,
                    ],
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                  ),
                ),
                child: Stack(
                  children: [
                    Positioned(
                      right: -50,
                      top: -50,
                      child: Container(
                        width: 200,
                        height: 200,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          gradient: RadialGradient(
                            colors: [
                              AppTheme.accentPurple.withOpacity(0.1),
                              Colors.transparent,
                            ],
                          ),
                        ),
                      ),
                    ),
                    Positioned(
                      left: -30,
                      bottom: -30,
                      child: Container(
                        width: 150,
                        height: 150,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          gradient: RadialGradient(
                            colors: [
                              AppTheme.primaryBlue.withOpacity(0.1),
                              Colors.transparent,
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            actions: [
              _buildServerStatusBadge(serverState),
              const SizedBox(width: 8),
              Container(
                margin: const EdgeInsets.only(right: 16),
                child: IconButton(
                  icon: Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          AppTheme.primaryIndigo,
                          AppTheme.accentPurple,
                        ],
                      ),
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: [
                        BoxShadow(
                          color: AppTheme.primaryIndigo.withOpacity(0.3),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.add,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                  onPressed: () => context.go('/scrape'),
                  tooltip: 'Run Scrape',
                ),
              ),
            ],
          ),
          SliverToBoxAdapter(
            child: Container(
              color: Colors.white,
              padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: Column(
                children: [
                  if (_lastIndustry != null && _lastLocation != null)
                    Container(
                      margin: const EdgeInsets.only(bottom: 16),
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            AppTheme.primaryIndigo.withOpacity(0.1),
                            AppTheme.accentPurple.withOpacity(0.1),
                          ],
                        ),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: AppTheme.primaryIndigo.withOpacity(0.2),
                        ),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            Icons.history,
                            size: 16,
                            color: AppTheme.primaryIndigo,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            'Last search: $_lastIndustry • $_lastLocation',
                            style: TextStyle(
                              fontSize: 13,
                              fontWeight: FontWeight.w500,
                              color: AppTheme.primaryIndigo,
                            ),
                          ),
                        ],
                      ),
                    ),
                  Container(
                    decoration: BoxDecoration(
                      color: AppTheme.backgroundGray,
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: Colors.grey.shade200,
                      ),
                    ),
                    child: TextField(
                      controller: _searchController,
                      decoration: InputDecoration(
                        hintText: 'Search by name or phone...',
                        hintStyle: TextStyle(
                          color: AppTheme.mediumGray.withOpacity(0.7),
                        ),
                        prefixIcon: Icon(
                          CupertinoIcons.search,
                          color: AppTheme.mediumGray,
                        ),
                        border: InputBorder.none,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 16,
                        ),
                      ),
                      onChanged: (_) => setState(() {}),
                    ),
                  ),
                  const SizedBox(height: 12),
                  SizedBox(
                    height: 40,
                    child: ListView(
                      scrollDirection: Axis.horizontal,
                      children: [
                        _buildFilterChip(
                          label: 'Candidates',
                          icon: Icons.star,
                          isSelected: candidatesOnly,
                          onSelected: (selected) {
                            ref.read(candidatesOnlyProvider.notifier).state = selected;
                          },
                          color: AppTheme.accentPurple,
                        ),
                        const SizedBox(width: 8),
                        ...LeadStatus.values.map((status) {
                          final isSelected = statusFilter == 
                              _getStatusLabel(status).toLowerCase();
                          return Padding(
                            padding: const EdgeInsets.only(right: 8),
                            child: _buildFilterChip(
                              label: _getStatusLabel(status),
                              icon: _getStatusIcon(status),
                              isSelected: isSelected,
                              onSelected: (selected) {
                                ref.read(statusFilterProvider.notifier).state = selected
                                    ? _getStatusLabel(status).toLowerCase()
                                    : null;
                              },
                              color: _getStatusColor(status),
                            ),
                          );
                        }),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          leadsAsync.when(
            data: (leads) {
              if (leads.isEmpty) {
                return SliverFillRemaining(
                  hasScrollBody: false,
                  child: EmptyState(
                    icon: Icons.inbox,
                    title: 'No leads found',
                    description: candidatesOnly
                        ? 'No candidates match your criteria. Try adjusting your filters or run a new scrape.'
                        : 'Start by running a scrape to find potential leads in your area.',
                    buttonText: 'Run Scrape',
                    onButtonPressed: () => context.go('/scrape'),
                  ),
                );
              }
              
              return SliverPadding(
                padding: const EdgeInsets.all(16),
                sliver: SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) {
                      final lead = leads[index];
                      return _buildLeadCard(context, lead);
                    },
                    childCount: leads.length,
                  ),
                ),
              );
            },
            loading: () {
              _addLoadingLog('Fetching leads from server...');
              return SliverFillRemaining(
                hasScrollBody: false,
                child: LoadingState(
                  message: 'Loading your leads',
                  submessage: 'Please wait while we fetch your data',
                  logs: _loadingLogs,
                ),
              );
            },
            error: (error, stack) => SliverFillRemaining(
              hasScrollBody: false,
              child: EmptyState(
                icon: Icons.error_outline,
                title: 'Connection Error',
                description: 'Unable to load leads. Please check your server connection and try again.',
                buttonText: 'Retry',
                onButtonPressed: () {
                  ref.invalidate(leadsProvider);
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildServerStatusBadge(ServerState serverState) {
    Color statusColor;
    IconData statusIcon;
    
    switch (serverState.status) {
      case ServerStatus.online:
        statusColor = AppTheme.successGreen;
        statusIcon = Icons.check_circle;
        break;
      case ServerStatus.offline:
      case ServerStatus.error:
        statusColor = AppTheme.errorRed;
        statusIcon = Icons.error;
        break;
      case ServerStatus.checking:
      case ServerStatus.starting:
        statusColor = AppTheme.warningOrange;
        statusIcon = Icons.sync;
        break;
    }
    
    return Material(
      color: Colors.transparent,
      child: InkWell(
        borderRadius: BorderRadius.circular(20),
        onTap: () => context.go('/server'),
        child: Container(
          margin: const EdgeInsets.only(right: 8),
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: statusColor.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: statusColor.withOpacity(0.3),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                statusIcon,
                size: 14,
                color: statusColor,
              ),
              const SizedBox(width: 6),
              Text(
                'Server',
                style: TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: statusColor,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFilterChip({
    required String label,
    required IconData icon,
    required bool isSelected,
    required Function(bool) onSelected,
    required Color color,
  }) {
    return FilterChip(
      label: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 16,
            color: isSelected ? Colors.white : color,
          ),
          const SizedBox(width: 6),
          Text(
            label,
            style: TextStyle(
              fontWeight: FontWeight.w600,
              color: isSelected ? Colors.white : color,
            ),
          ),
        ],
      ),
      selected: isSelected,
      onSelected: onSelected,
      backgroundColor: color.withOpacity(0.1),
      selectedColor: color,
      checkmarkColor: Colors.white,
      side: BorderSide(
        color: color.withOpacity(0.3),
        width: 1,
      ),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
    );
  }

  Widget _buildLeadCard(BuildContext context, Lead lead) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Colors.grey.shade200,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(16),
          onTap: () => context.go('/leads/${lead.id}'),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                Container(
                  width: 56,
                  height: 56,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        _getStatusColor(lead.status),
                        _getStatusColor(lead.status).withOpacity(0.7),
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(14),
                  ),
                  child: Center(
                    child: Text(
                      lead.businessName.isNotEmpty
                          ? lead.businessName[0].toUpperCase()
                          : '?',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.w700,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        lead.businessName,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: AppTheme.darkGray,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Icon(
                            Icons.phone,
                            size: 14,
                            color: AppTheme.mediumGray,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            lead.phone,
                            style: TextStyle(
                              fontSize: 14,
                              color: AppTheme.mediumGray,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Wrap(
                        spacing: 6,
                        runSpacing: 6,
                        children: [
                          if (lead.rating != null)
                            _buildInfoBadge(
                              icon: Icons.star,
                              label: '${lead.rating!.toStringAsFixed(1)}',
                              color: AppTheme.warningOrange,
                            ),
                          if (lead.reviewCount != null)
                            _buildInfoBadge(
                              icon: Icons.rate_review,
                              label: '${lead.reviewCount}',
                              color: AppTheme.primaryBlue,
                            ),
                          if (lead.hasWebsite)
                            _buildInfoBadge(
                              icon: Icons.language,
                              label: 'Website',
                              color: AppTheme.successGreen,
                            ),
                          if (lead.isCandidate)
                            _buildInfoBadge(
                              icon: Icons.verified,
                              label: 'Candidate',
                              color: AppTheme.accentPurple,
                            ),
                        ],
                      ),
                    ],
                  ),
                ),
                Column(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: _getStatusColor(lead.status).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(
                          color: _getStatusColor(lead.status).withOpacity(0.3),
                        ),
                      ),
                      child: Text(
                        _getStatusLabel(lead.status),
                        style: TextStyle(
                          fontSize: 11,
                          fontWeight: FontWeight.w700,
                          color: _getStatusColor(lead.status),
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Icon(
                      Icons.chevron_right,
                      color: AppTheme.mediumGray.withOpacity(0.5),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildInfoBadge({
    required IconData icon,
    required String label,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.15),
        borderRadius: BorderRadius.circular(6),
        border: Border.all(
          color: color.withOpacity(0.3),
          width: 1,
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 12,
            color: color.withOpacity(0.9),
          ),
          const SizedBox(width: 4),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w700,
              color: color.withOpacity(0.9),
            ),
          ),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/leads/presentation/pages/leads_list_page.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/entities/lead.dart';
import '../providers/job_provider.dart';
import '../widgets/server_status_indicator.dart';

final leadsProvider = FutureProvider.family<List<Lead>, Map<String, dynamic>>(
  (ref, params) async {
    final repository = ref.watch(leadsRepositoryProvider);
    final result = await repository.getLeads(
      status: params['status'],
      search: params['search'],
      candidatesOnly: params['candidatesOnly'],
    );
    return result.fold(
      (failure) => throw Exception(failure.message),
      (leads) => leads,
    );
  },
);

class LeadsListPage extends ConsumerStatefulWidget {
  final String? initialFilter;

  const LeadsListPage({super.key, this.initialFilter});

  @override
  ConsumerState<LeadsListPage> createState() => _LeadsListPageState();
}

class _LeadsListPageState extends ConsumerState<LeadsListPage> {
  final _searchController = TextEditingController();
  String? _statusFilter;
  bool _candidatesOnly = false;
  String? _lastIndustry;
  String? _lastLocation;

  @override
  void initState() {
    super.initState();
    if (widget.initialFilter == 'candidates') {
      _candidatesOnly = true;
    }
    _loadLastScrapeContext();
  }

  Future<void> _loadLastScrapeContext() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _lastIndustry = prefs.getString('last_industry');
      _lastLocation = prefs.getString('last_location');
    });
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  Color _getStatusColor(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return Colors.grey;
      case LeadStatus.called:
        return Colors.orange;
      case LeadStatus.interested:
        return Colors.blue;
      case LeadStatus.converted:
        return Colors.green;
      case LeadStatus.dnc:
        return Colors.black;
    }
  }

  String _getStatusLabel(LeadStatus status) {
    switch (status) {
      case LeadStatus.new_:
        return 'NEW';
      case LeadStatus.called:
        return 'CALLED';
      case LeadStatus.interested:
        return 'INTERESTED';
      case LeadStatus.converted:
        return 'CONVERTED';
      case LeadStatus.dnc:
        return 'DNC';
    }
  }

  @override
  Widget build(BuildContext context) {
    final params = {
      'status': _statusFilter,
      'search': _searchController.text.isEmpty ? null : _searchController.text,
      'candidatesOnly': _candidatesOnly,
    };
    final leadsAsync = ref.watch(leadsProvider(params));

    return Scaffold(
      appBar: AppBar(
        title: const Text('LeadLoq'),
        elevation: 2,
        actions: [
          const ServerStatusIndicator(),
          IconButton(
            icon: const Icon(Icons.play_arrow),
            onPressed: () => context.go('/scrape'),
            tooltip: 'Run Scrape',
          ),
        ],
      ),
      body: Stack(
        children: [
          Column(
        children: [
          if (_lastIndustry != null && _lastLocation != null)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              color: Theme.of(context).primaryColor.withOpacity(0.1),
              child: Row(
                children: [
                  Chip(
                    label: Text(
                      '$_lastIndustry • $_lastLocation',
                      style: const TextStyle(fontSize: 12),
                    ),
                    backgroundColor: Theme.of(context).primaryColor.withOpacity(0.2),
                  ),
                ],
              ),
            ),
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: 'Search leads...',
                    prefixIcon: const Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                  ),
                  onChanged: (_) => setState(() {}),
                ),
                const SizedBox(height: 8),
                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      FilterChip(
                        label: const Text('Candidates Only'),
                        selected: _candidatesOnly,
                        onSelected: (selected) {
                          setState(() => _candidatesOnly = selected);
                        },
                      ),
                      const SizedBox(width: 8),
                      ...LeadStatus.values.map((status) {
                        final isSelected = _statusFilter == 
                            _getStatusLabel(status).toLowerCase();
                        return Padding(
                          padding: const EdgeInsets.only(right: 8),
                          child: FilterChip(
                            label: Text(_getStatusLabel(status)),
                            selected: isSelected,
                            onSelected: (selected) {
                              setState(() {
                                _statusFilter = selected
                                    ? _getStatusLabel(status).toLowerCase()
                                    : null;
                              });
                            },
                            backgroundColor: isSelected
                                ? _getStatusColor(status).withOpacity(0.2)
                                : null,
                          ),
                        );
                      }),
                    ],
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: leadsAsync.when(
              data: (leads) {
                if (leads.isEmpty) {
                  return const Center(
                    child: Text('No leads found'),
                  );
                }
                return ListView.builder(
                  itemCount: leads.length,
                  itemBuilder: (context, index) {
                    final lead = leads[index];
                    return ListTile(
                      leading: CircleAvatar(
                        backgroundColor: _getStatusColor(lead.status),
                        child: Text(
                          lead.businessName.isNotEmpty
                              ? lead.businessName[0].toUpperCase()
                              : '?',
                          style: const TextStyle(color: Colors.white),
                        ),
                      ),
                      title: Text(lead.businessName),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(lead.phone),
                          if (lead.rating != null)
                            Row(
                              children: [
                                const Icon(Icons.star, size: 16, color: Colors.amber),
                                Text(' ${lead.rating!.toStringAsFixed(1)}'),
                                if (lead.reviewCount != null)
                                  Text(' (${lead.reviewCount} reviews)'),
                              ],
                            ),
                          Row(
                            children: [
                              if (lead.hasWebsite)
                                const Icon(Icons.language, size: 16, color: Colors.green),
                              if (lead.isCandidate)
                                const Icon(Icons.check_circle, size: 16, color: Colors.blue),
                              if (lead.platformHint != null)
                                Padding(
                                  padding: const EdgeInsets.only(left: 4),
                                  child: Chip(
                                    label: Text(
                                      lead.platformHint!,
                                      style: const TextStyle(fontSize: 10),
                                    ),
                                    padding: EdgeInsets.zero,
                                    materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                                  ),
                                ),
                            ],
                          ),
                        ],
                      ),
                      trailing: Chip(
                        label: Text(
                          _getStatusLabel(lead.status),
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        backgroundColor: _getStatusColor(lead.status),
                        padding: EdgeInsets.zero,
                        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      ),
                      onTap: () => context.go('/leads/${lead.id}'),
                    );
                  },
                );
              },
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(
                child: Text('Error: $error'),
              ),
            ),
          ),
        ],
          ),
          const ServerStatusBadge(),
        ],
      ),
    );
  }
}
</file>

<file path="lib/features/leads/presentation/pages/run_scrape_page.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../../core/theme/app_theme.dart';
import '../../domain/entities/job.dart';
import '../providers/scrape_form_provider.dart';
import '../providers/job_provider.dart';

class RunScrapePage extends ConsumerStatefulWidget {
  const RunScrapePage({super.key});

  @override
  ConsumerState<RunScrapePage> createState() => _RunScrapePageState();
}

class _RunScrapePageState extends ConsumerState<RunScrapePage> {
  final _formKey = GlobalKey<FormState>();
  final _customIndustryController = TextEditingController();
  final _locationController = TextEditingController();
  final _limitController = TextEditingController();

  final List<String> _industries = [
    'Painter',
    'Landscaper',
    'Roofer',
    'Plumber',
    'Electrician',
    'Custom...',
  ];

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final formState = ref.read(scrapeFormProvider);
      _locationController.text = formState.location;
      _limitController.text = formState.limit.toString();
      if (formState.isCustomIndustry) {
        _customIndustryController.text = formState.industry;
      }
    });
  }

  @override
  void dispose() {
    _customIndustryController.dispose();
    _locationController.dispose();
    _limitController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final formState = ref.watch(scrapeFormProvider);
    final formNotifier = ref.read(scrapeFormProvider.notifier);
    final jobState = ref.watch(jobProvider);
    final jobNotifier = ref.read(jobProvider.notifier);

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/leads'),
        ),
        title: const Text('Run Scrape'),
        elevation: 2,
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            const Text(
              'Industry',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: _industries.map((industry) {
                final isSelected = industry == 'Custom...'
                    ? formState.isCustomIndustry
                    : formState.industry.toLowerCase() ==
                        industry.toLowerCase();
                return ChoiceChip(
                  label: Text(
                    industry,
                    style: TextStyle(
                      color: isSelected ? Colors.white : AppTheme.primaryIndigo,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  selected: isSelected,
                  selectedColor: AppTheme.primaryIndigo,
                  backgroundColor: AppTheme.lightGray,
                  checkmarkColor: Colors.white,
                  side: BorderSide(
                    color: isSelected
                        ? AppTheme.primaryIndigo
                        : AppTheme.primaryIndigo.withOpacity(0.3),
                  ),
                  onSelected: (selected) {
                    if (selected) {
                      if (industry == 'Custom...') {
                        formNotifier.setIndustry('custom');
                      } else {
                        formNotifier.setIndustry(industry);
                      }
                    }
                  },
                );
              }).toList(),
            ),
            if (formState.isCustomIndustry) ...[
              const SizedBox(height: 8),
              TextFormField(
                controller: _customIndustryController,
                decoration: const InputDecoration(
                  labelText: 'Custom Industry',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (formState.isCustomIndustry &&
                      (value == null || value.isEmpty)) {
                    return 'Please enter a custom industry';
                  }
                  return null;
                },
                onChanged: (value) {
                  formNotifier.setIndustry(value);
                },
              ),
            ],
            const SizedBox(height: 16),
            TextFormField(
              controller: _locationController,
              decoration: const InputDecoration(
                labelText: 'Location',
                hintText: 'e.g., Austin, TX',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a location';
                }
                return null;
              },
              onChanged: (value) {
                formNotifier.setLocation(value);
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _limitController,
              decoration: const InputDecoration(
                labelText: 'Result Limit',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter a limit';
                }
                final limit = int.tryParse(value);
                if (limit == null || limit < 1 || limit > 200) {
                  return 'Limit must be between 1 and 200';
                }
                return null;
              },
              onChanged: (value) {
                final limit = int.tryParse(value);
                if (limit != null) {
                  formNotifier.setLimit(limit);
                }
              },
            ),
            const SizedBox(height: 16),
            ExpansionTile(
              title: const Text('Advanced Settings'),
              initiallyExpanded: formState.isAdvancedExpanded,
              onExpansionChanged: (expanded) {
                formNotifier.toggleAdvanced();
              },
              children: [
                Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              'Min Rating: ${formState.minRating.toStringAsFixed(1)}',
                            ),
                          ),
                          Expanded(
                            flex: 2,
                            child: Slider(
                              value: formState.minRating,
                              min: 0,
                              max: 5,
                              divisions: 50,
                              label: formState.minRating.toStringAsFixed(1),
                              onChanged: (value) {
                                formNotifier.setMinRating(value);
                              },
                            ),
                          ),
                        ],
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              'Min Reviews: ${formState.minReviews}',
                            ),
                          ),
                          Expanded(
                            flex: 2,
                            child: Slider(
                              value: formState.minReviews.toDouble(),
                              min: 0,
                              max: 100,
                              divisions: 100,
                              label: formState.minReviews.toString(),
                              onChanged: (value) {
                                formNotifier.setMinReviews(value.toInt());
                              },
                            ),
                          ),
                        ],
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              'Recent Days: ${formState.recentDays}',
                            ),
                          ),
                          Expanded(
                            flex: 2,
                            child: Slider(
                              value: formState.recentDays.toDouble(),
                              min: 30,
                              max: 730,
                              divisions: 70,
                              label: formState.recentDays.toString(),
                              onChanged: (value) {
                                formNotifier.setRecentDays(value.toInt());
                              },
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),
            if (jobState.isRunning) ...[
              LinearProgressIndicator(
                value: jobState.currentJob != null &&
                        jobState.currentJob!.total > 0
                    ? jobState.currentJob!.processed /
                        jobState.currentJob!.total
                    : null,
              ),
              const SizedBox(height: 8),
              Center(
                child: Text(
                  jobState.currentJob != null
                      ? 'Processed ${jobState.currentJob!.processed} / ${jobState.currentJob!.total}'
                      : 'Starting...',
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
              ),
            ],
            if (jobState.error != null) ...[
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.red.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red.shade200),
                ),
                child: Row(
                  children: [
                    Icon(Icons.error_outline, color: Colors.red.shade700),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        jobState.error!,
                        style: TextStyle(color: Colors.red.shade700),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),
            ],
            ElevatedButton(
              onPressed: jobState.isRunning
                  ? null
                  : () async {
                      if (_formKey.currentState!.validate()) {
                        if (formState.industry.isEmpty) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('Please select an industry'),
                            ),
                          );
                          return;
                        }

                        await jobNotifier.startScrape(formState.toParams());

                        // Wait a moment for the state to update
                        await Future.delayed(const Duration(milliseconds: 100));
                        
                        final updatedJobState = ref.read(jobProvider);
                        if (updatedJobState.jobId != null && context.mounted) {
                          // Navigate to the monitoring page
                          context.go('/scrape/monitor/${updatedJobState.jobId}');
                        }
                      }
                    },
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: Text(jobState.isRunning ? 'Running...' : 'Run Scrape'),
            ),
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/leads/presentation/pages/scrape_monitor_page.dart">
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../../core/theme/app_theme.dart';
import '../../data/datasources/websocket_service.dart';
// Removed job_provider import to avoid dioProvider name clash
import '../providers/server_status_provider.dart';
import 'package:dio/dio.dart';

class ScrapeMonitorPage extends ConsumerStatefulWidget {
  final String jobId;
  
  const ScrapeMonitorPage({super.key, required this.jobId});
  
  @override
  ConsumerState<ScrapeMonitorPage> createState() => _ScrapeMonitorPageState();
}

class _ScrapeMonitorPageState extends ConsumerState<ScrapeMonitorPage> {
  final WebSocketService _wsService = WebSocketService();
  final List<String> _logs = [];
  Map<String, dynamic>? _jobStatus;
  final ScrollController _scrollController = ScrollController();
  Timer? _httpPoller;
  int _httpTailCount = 0;
  
  @override
  void initState() {
    super.initState();
    _connectWebSocket();
    _startHttpFallbackPoller();
  }
  
  void _connectWebSocket() {
    _wsService.connect(widget.jobId);
    
    _wsService.logs.listen((log) {
      setState(() {
        _logs.add(log);
      });
      // Auto-scroll to bottom
      Future.delayed(const Duration(milliseconds: 100), () {
        if (_scrollController.hasClients) {
          _scrollController.animateTo(
            _scrollController.position.maxScrollExtent,
            duration: const Duration(milliseconds: 200),
            curve: Curves.easeOut,
          );
        }
      });
    });
    
    _wsService.status.listen((status) {
      setState(() {
        _jobStatus = status;
      });
      
      if (status['status'] == 'done') {
        _showCompletionDialog();
      } else if (status['status'] == 'error') {
        _showErrorDialog(status['message'] ?? 'Unknown error');
      }
    });
  }
  
  void _startHttpFallbackPoller() {
    // Poll HTTP logs as a fallback in case WS is blocked or drops events
    _httpPoller?.cancel();
    _httpPoller = Timer.periodic(const Duration(seconds: 2), (_) async {
      try {
        final dio = ref.read(dioProvider);
        final resp = await dio.get(
          'http://localhost:8000/jobs/${widget.jobId}/logs',
          queryParameters: {'tail': 500},
          options: Options(
            receiveTimeout: const Duration(seconds: 2),
            sendTimeout: const Duration(seconds: 2),
          ),
        );
        final data = resp.data as Map<String, dynamic>;
        final lines = (data['lines'] as List<dynamic>).cast<String>();
        // Append only new lines we haven't seen
        if (lines.length > _httpTailCount) {
          final newLines = lines.sublist(_httpTailCount);
          setState(() {
            _logs.addAll(newLines);
            _httpTailCount = lines.length;
          });
          // Auto-scroll to bottom
          if (_scrollController.hasClients) {
            _scrollController.animateTo(
              _scrollController.position.maxScrollExtent,
              duration: const Duration(milliseconds: 200),
              curve: Curves.easeOut,
            );
          }
        }
      } catch (_) {
        // ignore; keep polling
      }
    });
  }
  
  void _showCompletionDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.check_circle, color: AppTheme.successGreen),
            const SizedBox(width: 12),
            const Text('Scrape Complete!'),
          ],
        ),
        content: Text(
          'Successfully scraped ${_jobStatus?['processed'] ?? 0} leads.',
          style: const TextStyle(fontSize: 16),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.go('/');
            },
            child: const Text('View Leads'),
          ),
        ],
      ),
    );
  }
  
  void _showErrorDialog(String error) {
    final logsPreview = _logs.isNotEmpty
        ? _logs.sublist(_logs.length - (_logs.length > 10 ? 10 : _logs.length))
        : const <String>[];
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.error, color: AppTheme.errorRed),
            const SizedBox(width: 12),
            const Text('Scrape Failed'),
          ],
        ),
        content: SizedBox(
          width: 500,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(error),
              const SizedBox(height: 12),
              const Text('Recent output:', style: TextStyle(fontWeight: FontWeight.w600)),
              const SizedBox(height: 6),
              Container(
                constraints: const BoxConstraints(maxHeight: 200),
                color: Colors.black87,
                child: ListView.builder(
                  shrinkWrap: true,
                  itemCount: logsPreview.length,
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 6),
                      child: Text(
                        logsPreview[index],
                        style: const TextStyle(color: Colors.white70, fontFamily: 'monospace', fontSize: 12),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('Stay Here'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.go('/server');
            },
            child: const Text('View Diagnostics'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.go('/');
            },
            child: const Text('Back to Leads'),
          ),
        ],
      ),
    );
  }
  
  @override
  void dispose() {
    _wsService.dispose();
    _scrollController.dispose();
    _httpPoller?.cancel();
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    final progress = (_jobStatus?['processed'] ?? 0) / (_jobStatus?['total'] ?? 1);
    
    return Scaffold(
      backgroundColor: AppTheme.backgroundGray,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppTheme.darkGray),
          onPressed: () => context.go('/'),
        ),
        title: Row(
          children: [
            Image.asset(
              'assets/images/LeadLoq-logo.png',
              height: 24,
            ),
            const SizedBox(width: 8),
            Text(
              'Scraping Progress',
              style: TextStyle(
                color: AppTheme.darkGray,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
      body: Column(
        children: [
          if ((_jobStatus?['message'] as String?) != null && (_jobStatus?['status'] == 'error'))
            Container(
              width: double.infinity,
              color: AppTheme.errorRed.withOpacity(0.1),
              padding: const EdgeInsets.all(12),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(Icons.error, color: AppTheme.errorRed),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      _jobStatus?['message'] ?? 'Unknown error',
                      style: TextStyle(color: AppTheme.errorRed),
                    ),
                  ),
                ],
              ),
            ),
          // Progress section
          Container(
            padding: const EdgeInsets.all(20),
            color: Colors.white,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Status: ${_jobStatus?['status'] ?? 'Initializing'}',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: _getStatusColor(_jobStatus?['status']),
                      ),
                    ),
                    Text(
                      '${_jobStatus?['processed'] ?? 0} / ${_jobStatus?['total'] ?? 0}',
                      style: TextStyle(
                        fontSize: 14,
                        color: AppTheme.mediumGray,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                LinearProgressIndicator(
                  value: progress,
                  backgroundColor: AppTheme.mediumGray.withOpacity(0.2),
                  valueColor: AlwaysStoppedAnimation<Color>(
                    _getStatusColor(_jobStatus?['status']),
                  ),
                  minHeight: 8,
                ),
                const SizedBox(height: 8),
                Text(
                  '${(progress * 100).toStringAsFixed(1)}% Complete',
                  style: TextStyle(
                    fontSize: 12,
                    color: AppTheme.mediumGray,
                  ),
                ),
              ],
            ),
          ),
          
          // Logs section
          Expanded(
            child: Container(
              margin: const EdgeInsets.all(16),
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.terminal,
                        color: Colors.green.shade400,
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Text(
                        'Server Logs',
                        style: TextStyle(
                          color: Colors.green.shade400,
                          fontWeight: FontWeight.w600,
                          fontFamily: 'monospace',
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Expanded(
                    child: ListView.builder(
                      controller: _scrollController,
                      itemCount: _logs.length,
                      itemBuilder: (context, index) {
                        return Padding(
                          padding: const EdgeInsets.symmetric(vertical: 2),
                          child: Text(
                            _logs[index],
                            style: const TextStyle(
                              color: Colors.white70,
                              fontFamily: 'monospace',
                              fontSize: 12,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Color _getStatusColor(String? status) {
    switch (status) {
      case 'running':
        return AppTheme.primaryBlue;
      case 'done':
        return AppTheme.successGreen;
      case 'error':
        return AppTheme.errorRed;
      default:
        return AppTheme.mediumGray;
    }
  }
}
</file>

<file path="lib/features/leads/presentation/pages/server_diagnostics_page.dart">
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter/services.dart';
import 'package:web_socket_channel/io.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
import 'package:web_socket_channel/status.dart' as ws_status;
import '../providers/server_status_provider.dart';
import 'package:go_router/go_router.dart';
import 'dart:convert';

class ServerDiagnosticsPage extends ConsumerStatefulWidget {
  const ServerDiagnosticsPage({super.key});

  @override
  ConsumerState<ServerDiagnosticsPage> createState() => _ServerDiagnosticsPageState();
}

class _ServerDiagnosticsPageState extends ConsumerState<ServerDiagnosticsPage> {
  WebSocketChannel? _channel;
  final List<String> _live = [];

  @override
  void initState() {
    super.initState();
    try {
      final rawBase = dotenv.env['BASE_URL'] ?? 'http://localhost:8000';

      // strip fragments/comments like "http://localhost:8000#"
      final cleanBase = rawBase.split('#').first.trim();

      // normalize trailing slash
      final baseNoSlash = cleanBase.endsWith('/')
          ? cleanBase.substring(0, cleanBase.length - 1)
          : cleanBase;

      final httpUri = Uri.parse(baseNoSlash);
      final wsScheme = httpUri.scheme == 'https' ? 'wss' : 'ws';

      // preserve any base path, then append /ws/logs
      final basePath = httpUri.path.isEmpty
          ? ''
          : (httpUri.path.endsWith('/') ? httpUri.path.substring(0, httpUri.path.length - 1) : httpUri.path);

      final wsUri = Uri(
        scheme: wsScheme,
        userInfo: httpUri.userInfo.isEmpty ? null : httpUri.userInfo,
        host: httpUri.host,
        port: httpUri.hasPort ? httpUri.port : null,
        path: '$basePath/ws/logs',
      );

      // Use IO channel on desktop targets
      _channel = IOWebSocketChannel.connect(wsUri.toString());

      _channel!.stream.listen((event) {
        final line = _extractMessage(event is String ? event : event.toString());
        if (line != null) setState(() => _live.add(line));
      }, onError: (_) {}, onDone: () {});
    } catch (_) {
      // You could log this if desired
    }
  }


  String? _extractMessage(String raw) {
    try {
      final map = jsonDecode(raw) as Map<String, dynamic>;
      final msg = map['message'];
      if (msg is String) return msg;
    } catch (_) {
      // Fallback: treat as plain line
      if (raw.isNotEmpty) return raw;
    }
    return null;
  }

  @override
  void dispose() {
    _channel?.sink.close(ws_status.normalClosure);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final server = ref.watch(serverStatusProvider);
    final notifier = ref.read(serverStatusProvider.notifier);

    Color statusColor;
    String statusText;
    switch (server.status) {
      case ServerStatus.online:
        statusColor = Colors.green;
        statusText = 'Online';
        break;
      case ServerStatus.offline:
        statusColor = Colors.red;
        statusText = 'Offline';
        break;
      case ServerStatus.starting:
        statusColor = Colors.orange;
        statusText = 'Starting';
        break;
      case ServerStatus.checking:
        statusColor = Colors.orange;
        statusText = 'Checking';
        break;
      case ServerStatus.error:
        statusColor = Colors.red;
        statusText = 'Error';
        break;
    }

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            if (Navigator.of(context).canPop()) {
              Navigator.of(context).pop();
            } else {
              context.go('/leads');
            }
          },
          tooltip: 'Back',
        ),
        title: const Text('Server Diagnostics'),
        actions: [
          IconButton(
            onPressed: () {
              notifier.checkServerHealth();
              ref.invalidate(serverLogsProvider);
            },
            tooltip: 'Recheck',
            icon: const Icon(Icons.refresh),
          ),
          IconButton(
            onPressed: () async {
              try {
                final base = dotenv.env['BASE_URL'] ?? 'http://localhost:8000';
                final baseHttp = base.endsWith('/') ? base.substring(0, base.length - 1) : base;
                final dio = ref.read(dioProvider);
                final resp = await dio.get('$baseHttp/diagnostics');
                final data = resp.data as Map<String, dynamic>;
                if (!context.mounted) return;
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: const Text('Environment Diagnostics'),
                    content: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _diagRow('Scraper ready', data['scraper_ready'] == true),
                          _diagRow('Database OK', data['db_ok'] == true),
                          _diagRow('Log path OK', data['log_ok'] == true),
                          const SizedBox(height: 8),
                          Text('Python: ${data['python']}'),
                          Text('CWD: ${data['cwd']}'),
                          if (data['leads_count'] != null) Text('Leads in DB: ${data['leads_count']}'),
                          const SizedBox(height: 12),
                          const Text('Messages:', style: TextStyle(fontWeight: FontWeight.w600)),
                          const SizedBox(height: 4),
                          ...((data['messages'] as List<dynamic>? ?? const [])
                              .map((m) => Text('- ${m.toString()}')))
                        ],
                      ),
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(),
                        child: const Text('Close'),
                      )
                    ],
                  ),
                );
              } catch (_) {}
            },
            tooltip: 'Diagnostics',
            icon: const Icon(Icons.science),
          ),
        ],
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                Container(
                  width: 12,
                  height: 12,
                  decoration: BoxDecoration(
                    color: statusColor,
                    shape: BoxShape.circle,
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  statusText,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: statusColor,
                  ),
                ),
                const Spacer(),
                if (server.lastCheck != null)
                  Text(
                    'Last check: ${server.lastCheck}',
                    style: const TextStyle(color: Colors.grey),
                  ),
              ],
            ),
          ),
          if (server.message != null)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Text(
                server.message!,
                style: const TextStyle(fontSize: 14),
              ),
            ),
          const SizedBox(height: 8),
          const Divider(height: 1),
          const Padding(
            padding: EdgeInsets.all(16),
            child: Text(
              'Server Logs',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
            ),
          ),
          Expanded(
            child: Container(
              color: Colors.black,
              child: Consumer(
                builder: (context, ref, _) {
                  final logsAsync = ref.watch(serverLogsProvider);
                  return logsAsync.when(
                    data: (lines) {
                      // Merge: server file logs + live WS lines + in-app captured logs
                      final merged = <String>[]
                        ..addAll(lines)
                        ..addAll(_live)
                        ..addAll(server.logs);
                      return ListView.builder(
                        reverse: true,
                        itemCount: merged.length,
                        itemBuilder: (context, index) {
                          final line = merged[merged.length - 1 - index];
                          final isErr = line.startsWith('[ERR]') || line.contains('ERROR');
                          return Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                            child: Text(
                              line,
                              style: TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 12,
                                color: isErr ? Colors.redAccent : Colors.greenAccent,
                              ),
                            ),
                          );
                        },
                      );
                    },
                    loading: () => const Center(
                      child: CircularProgressIndicator(strokeWidth: 2),
                    ),
                    error: (_, __) {
                      final fallback = server.logs;
                      return ListView.builder(
                        reverse: true,
                        itemCount: fallback.length,
                        itemBuilder: (context, index) {
                          final line = fallback[fallback.length - 1 - index];
                          final isErr = line.startsWith('[ERR]') || line.contains('ERROR');
                          return Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                            child: Text(
                              line,
                              style: TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 12,
                                color: isErr ? Colors.redAccent : Colors.greenAccent,
                              ),
                            ),
                          );
                        },
                      );
                    },
                  );
                },
              ),
            ),
          ),
          const Divider(height: 1),
          const Padding(
            padding: EdgeInsets.all(16),
            child: Text(
              'Scrape Jobs',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
            ),
          ),
          SizedBox(
            height: 220,
            child: Consumer(
              builder: (context, ref, _) {
                final jobsAsync = ref.watch(jobsListProvider);
                return jobsAsync.when(
                  data: (jobs) {
                    if (jobs.isEmpty) {
                      return const Center(child: Text('No jobs yet'));
                    }
                    return ListView.separated(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      scrollDirection: Axis.horizontal,
                      itemCount: jobs.length,
                      separatorBuilder: (_, __) => const SizedBox(width: 12),
                      itemBuilder: (context, index) {
                        final j = jobs[index];
                        final status = j['status']?.toString() ?? 'unknown';
                        final jobId = j['job_id']?.toString() ?? '';
                        final processed = j['processed'] ?? 0;
                        final total = j['total'] ?? 0;
                        final color = _statusColor(status);
                        return InkWell(
                          onTap: () => _showJobLogsSheet(context, ref, jobId),
                          child: Container(
                            width: 260,
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: color.withOpacity(0.3)),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Icon(Icons.analytics, color: color),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        jobId,
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                        style: const TextStyle(fontWeight: FontWeight.w600),
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 8),
                                Text('Status: $status', style: TextStyle(color: color)),
                                const SizedBox(height: 4),
                                LinearProgressIndicator(
                                  value: total == 0 ? 0 : (processed / (total as num)).toDouble(),
                                  minHeight: 6,
                                  backgroundColor: color.withOpacity(0.15),
                                  valueColor: AlwaysStoppedAnimation<Color>(color),
                                ),
                                const SizedBox(height: 8),
                                Text('Processed: $processed / $total', style: const TextStyle(fontSize: 12)),
                                const Spacer(),
                                Row(
                                  children: [
                                    TextButton(
                                      onPressed: () => _showJobLogsSheet(context, ref, jobId),
                                      child: const Text('View Logs'),
                                    ),
                                    const SizedBox(width: 8),
                                    OutlinedButton(
                                      onPressed: () => context.go('/scrape/monitor/$jobId'),
                                      child: const Text('Open Monitor'),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    );
                  },
                  loading: () => const Center(child: CircularProgressIndicator(strokeWidth: 2)),
                  error: (_, __) => const Center(child: Text('Failed to load jobs')),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Color _statusColor(String status) {
    switch (status) {
      case 'running':
        return Colors.orange;
      case 'done':
        return Colors.green;
      case 'error':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  void _showJobLogsSheet(BuildContext context, WidgetRef ref, String jobId) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return SizedBox(
          height: MediaQuery.of(context).size.height * 0.6,
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.list_alt),
                    const SizedBox(width: 8),
                    Expanded(child: Text('Job $jobId', style: const TextStyle(fontWeight: FontWeight.w600))),
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                        context.go('/scrape/monitor/$jobId');
                      },
                      child: const Text('Open Monitor'),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Expanded(
                  child: FutureBuilder(
                    future: (() {
                      final base = dotenv.env['BASE_URL'] ?? 'http://localhost:8000';
                      final baseHttp = base.endsWith('/') ? base.substring(0, base.length - 1) : base;
                      return ref.read(dioProvider).get(
                        '$baseHttp/jobs/$jobId/logs',
                        queryParameters: {'tail': 500},
                      );
                    })(),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState != ConnectionState.done) {
                        return const Center(child: CircularProgressIndicator(strokeWidth: 2));
                      }
                      if (snapshot.hasError || snapshot.data == null) {
                        return const Center(child: Text('Failed to load job logs'));
                      }
                      final resp = snapshot.data as dynamic;
                      final lines = (resp.data['lines'] as List).cast<String>();
                      if (lines.isEmpty) return const Center(child: Text('No logs'));
                      return Column(
                        children: [
                          Align(
                            alignment: Alignment.centerRight,
                            child: TextButton.icon(
                              onPressed: () async {
                                final text = lines.join('\n');
                                await Clipboard.setData(ClipboardData(text: text));
                                if (!mounted) return;
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(content: Text('Job logs copied to clipboard')),
                                );
                              },
                              icon: const Icon(Icons.copy, size: 16),
                              label: const Text('Copy Logs'),
                            ),
                          ),
                          Expanded(
                            child: Container(
                              color: Colors.black,
                              child: ListView.builder(
                                itemCount: lines.length,
                                itemBuilder: (context, index) {
                                  final line = lines[index];
                                  final isErr = line.contains('ERROR') || line.contains('Traceback');
                                  return Padding(
                                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 3),
                                    child: Text(
                                      line,
                                      style: TextStyle(
                                        fontFamily: 'monospace',
                                        fontSize: 12,
                                        color: isErr ? Colors.redAccent : Colors.greenAccent,
                                      ),
                                    ),
                                  );
                                },
                              ),
                            ),
                          ),
                        ],
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

Widget _diagRow(String label, bool ok) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 2),
    child: Row(
      children: [
        Icon(ok ? Icons.check_circle : Icons.error, color: ok ? Colors.green : Colors.red, size: 16),
        const SizedBox(width: 6),
        Text(label),
      ],
    ),
  );
}
</file>

<file path="lib/features/leads/presentation/providers/job_provider.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:dio/dio.dart';
import '../../data/datasources/leads_remote_datasource.dart';
import '../../data/repositories/leads_repository_impl.dart';
import '../../domain/entities/job.dart';
import '../../domain/repositories/leads_repository.dart';
import '../../domain/usecases/run_scrape_usecase.dart';

final dioProvider = Provider<Dio>((ref) {
  return Dio();
});

final leadsRemoteDataSourceProvider = Provider<LeadsRemoteDataSource>((ref) {
  final dio = ref.watch(dioProvider);
  return LeadsRemoteDataSourceImpl(dio: dio);
});

final leadsRepositoryProvider = Provider<LeadsRepository>((ref) {
  final remoteDataSource = ref.watch(leadsRemoteDataSourceProvider);
  return LeadsRepositoryImpl(remoteDataSource: remoteDataSource);
});

final runScrapeUseCaseProvider = Provider<RunScrapeUseCase>((ref) {
  final repository = ref.watch(leadsRepositoryProvider);
  return RunScrapeUseCase(repository);
});

class JobState {
  final String? jobId;
  final bool isRunning;
  final Job? currentJob;
  final String? error;

  JobState({
    this.jobId,
    this.isRunning = false,
    this.currentJob,
    this.error,
  });

  JobState copyWith({
    String? jobId,
    bool? isRunning,
    Job? currentJob,
    String? error,
  }) {
    return JobState(
      jobId: jobId ?? this.jobId,
      isRunning: isRunning ?? this.isRunning,
      currentJob: currentJob ?? this.currentJob,
      error: error,
    );
  }
}

class JobNotifier extends StateNotifier<JobState> {
  final LeadsRepository repository;
  final Ref ref;

  JobNotifier(this.repository, this.ref) : super(JobState());
  
  void clearJob() {
    state = JobState();
  }

  Future<void> startScrape(RunScrapeParams params) async {
    state = state.copyWith(isRunning: true, error: null);

    final result = await repository.startScrape(params);

    result.fold(
      (failure) {
        state = state.copyWith(
          isRunning: false,
          error: failure.message,
        );
      },
      (jobId) {
        state = state.copyWith(jobId: jobId);
        _watchJob(jobId);
      },
    );
  }

  void _watchJob(String jobId) async {
    await for (final job in repository.watchJob(jobId)) {
      if (!mounted) break;
      
      state = state.copyWith(currentJob: job);

      if (job.status == JobStatus.done) {
        state = state.copyWith(isRunning: false);
        break;
      } else if (job.status == JobStatus.error) {
        state = state.copyWith(
          isRunning: false,
          error: job.message ?? 'Job failed',
        );
        break;
      }
    }
  }
}

final jobProvider = StateNotifierProvider.autoDispose<JobNotifier, JobState>((ref) {
  final repository = ref.watch(leadsRepositoryProvider);
  return JobNotifier(repository, ref);
});
</file>

<file path="lib/features/leads/presentation/providers/scrape_form_provider.dart">
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../domain/usecases/run_scrape_usecase.dart';

class ScrapeFormState {
  final String industry;
  final String location;
  final int limit;
  final double minRating;
  final int minReviews;
  final int recentDays;
  final bool isAdvancedExpanded;
  final bool isCustomIndustry;

  ScrapeFormState({
    this.industry = '',
    this.location = '',
    this.limit = 50,
    this.minRating = 4.0,
    this.minReviews = 3,
    this.recentDays = 365,
    this.isAdvancedExpanded = false,
    this.isCustomIndustry = false,
  });

  ScrapeFormState copyWith({
    String? industry,
    String? location,
    int? limit,
    double? minRating,
    int? minReviews,
    int? recentDays,
    bool? isAdvancedExpanded,
    bool? isCustomIndustry,
  }) {
    return ScrapeFormState(
      industry: industry ?? this.industry,
      location: location ?? this.location,
      limit: limit ?? this.limit,
      minRating: minRating ?? this.minRating,
      minReviews: minReviews ?? this.minReviews,
      recentDays: recentDays ?? this.recentDays,
      isAdvancedExpanded: isAdvancedExpanded ?? this.isAdvancedExpanded,
      isCustomIndustry: isCustomIndustry ?? this.isCustomIndustry,
    );
  }

  RunScrapeParams toParams() {
    return RunScrapeParams(
      industry: industry.toLowerCase(),
      location: location,
      limit: limit,
      minRating: minRating,
      minReviews: minReviews,
      recentDays: recentDays,
    );
  }
}

class ScrapeFormNotifier extends StateNotifier<ScrapeFormState> {
  final SharedPreferences prefs;

  ScrapeFormNotifier(this.prefs) : super(ScrapeFormState()) {
    _loadPreferences();
  }

  void _loadPreferences() {
    state = state.copyWith(
      industry: prefs.getString('last_industry') ?? '',
      location: prefs.getString('last_location') ?? '',
      limit: prefs.getInt('last_limit') ?? 50,
      minRating: prefs.getDouble('last_min_rating') ?? 4.0,
      minReviews: prefs.getInt('last_min_reviews') ?? 3,
      recentDays: prefs.getInt('last_recent_days') ?? 365,
    );
  }

  Future<void> _savePreferences() async {
    await prefs.setString('last_industry', state.industry);
    await prefs.setString('last_location', state.location);
    await prefs.setInt('last_limit', state.limit);
    await prefs.setDouble('last_min_rating', state.minRating);
    await prefs.setInt('last_min_reviews', state.minReviews);
    await prefs.setInt('last_recent_days', state.recentDays);
  }

  void setIndustry(String industry) {
    state = state.copyWith(
      industry: industry,
      isCustomIndustry: industry == 'custom',
    );
    _savePreferences();
  }

  void setLocation(String location) {
    state = state.copyWith(location: location);
    _savePreferences();
  }

  void setLimit(int limit) {
    state = state.copyWith(limit: limit.clamp(1, 200));
    _savePreferences();
  }

  void setMinRating(double rating) {
    state = state.copyWith(minRating: rating.clamp(0.0, 5.0));
    _savePreferences();
  }

  void setMinReviews(int reviews) {
    state = state.copyWith(minReviews: reviews);
    _savePreferences();
  }

  void setRecentDays(int days) {
    state = state.copyWith(recentDays: days);
    _savePreferences();
  }

  void toggleAdvanced() {
    state = state.copyWith(isAdvancedExpanded: !state.isAdvancedExpanded);
  }
}

final scrapeFormProvider =
    StateNotifierProvider<ScrapeFormNotifier, ScrapeFormState>((ref) {
  throw UnimplementedError('Must override with SharedPreferences');
});
</file>

<file path="lib/features/leads/presentation/providers/server_status_provider.dart">
import 'dart:async';
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

enum ServerStatus {
  checking,
  online,
  offline,
  starting,
  error,
}

class ServerState {
  final ServerStatus status;
  final String? message;
  final DateTime? lastCheck;
  final List<String> logs;

  ServerState({
    required this.status,
    this.message,
    this.lastCheck,
    List<String>? logs,
  }) : logs = logs ?? const [];

  ServerState copyWith({
    ServerStatus? status,
    String? message,
    DateTime? lastCheck,
    List<String>? logs,
  }) {
    return ServerState(
      status: status ?? this.status,
      message: message ?? this.message,
      lastCheck: lastCheck ?? this.lastCheck,
      logs: logs ?? this.logs,
    );
  }
}

class ServerStatusNotifier extends StateNotifier<ServerState> {
  final Dio dio;
  Timer? _healthCheckTimer;
  Process? _serverProcess;
  
  ServerStatusNotifier(this.dio) : super(ServerState(status: ServerStatus.checking)) {
    checkServerHealth();
    _startPeriodicHealthCheck();
  }

  void _startPeriodicHealthCheck() {
    _healthCheckTimer?.cancel();
    _healthCheckTimer = Timer.periodic(const Duration(seconds: 5), (_) {
      checkServerHealth();
    });
  }

  Future<void> checkServerHealth() async {
    try {
      state = state.copyWith(status: ServerStatus.checking);
      
      final response = await dio.get(
        'http://localhost:8000/health',
        options: Options(
          receiveTimeout: const Duration(seconds: 2),
          sendTimeout: const Duration(seconds: 2),
        ),
      );
      
      if (response.statusCode == 200) {
        state = ServerState(
          status: ServerStatus.online,
          message: 'Connected to LeadLoq API',
          lastCheck: DateTime.now(),
          logs: state.logs,
        );
      } else {
        state = ServerState(
          status: ServerStatus.offline,
          message: 'Server not responding',
          lastCheck: DateTime.now(),
          logs: state.logs,
        );
        _tryStartServer();
      }
    } on DioException catch (e) {
      if (e.type == DioExceptionType.connectionTimeout ||
          e.type == DioExceptionType.receiveTimeout ||
          e.type == DioExceptionType.connectionError) {
        state = ServerState(
          status: ServerStatus.offline,
          message: 'Cannot connect to server',
          lastCheck: DateTime.now(),
          logs: state.logs,
        );
        _tryStartServer();
      } else {
        state = ServerState(
          status: ServerStatus.error,
          message: 'Error: ${e.message}',
          lastCheck: DateTime.now(),
          logs: state.logs,
        );
      }
    } catch (e) {
      state = ServerState(
        status: ServerStatus.error,
        message: 'Unexpected error: $e',
        lastCheck: DateTime.now(),
        logs: state.logs,
      );
    }
  }

  Future<void> _tryStartServer() async {
    if (_serverProcess != null) {
      return;
    }
    
    state = state.copyWith(
      status: ServerStatus.starting,
      message: 'Starting server...',
    );
    
    try {
      final projectPath = Directory.current.path;
      final serverPath = '$projectPath/server';
      final venvPath = '$serverPath/venv';
      
      if (!await Directory(venvPath).exists()) {
        state = ServerState(
          status: ServerStatus.error,
          message: 'Server not configured. Please run: cd server && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt',
          lastCheck: DateTime.now(),
          logs: state.logs,
        );
        return;
      }
      
      _serverProcess = await Process.start(
        '$venvPath/bin/python',
        ['main.py'],
        workingDirectory: serverPath,
        environment: {
          'PATH': '$venvPath/bin:${Platform.environment['PATH']}',
        },
      );
      
      void _appendLog(String line) {
        final List<String> updated = List<String>.from(state.logs)..add(line);
        // Keep last 500 lines
        final trimmed = updated.length > 500 ? updated.sublist(updated.length - 500) : updated;
        state = state.copyWith(logs: trimmed);
      }

      _serverProcess!.stdout.listen((data) {
        final output = String.fromCharCodes(data);
        for (final line in output.split('\n')) {
          if (line.trim().isEmpty) continue;
          _appendLog('[OUT] ' + line.trim());
        }
        if (output.contains('Uvicorn running on')) {
          Future.delayed(const Duration(seconds: 2), () {
            checkServerHealth();
          });
        }
      });

      _serverProcess!.stderr.listen((data) {
        final error = String.fromCharCodes(data);
        for (final line in error.split('\n')) {
          if (line.trim().isEmpty) continue;
          _appendLog('[ERR] ' + line.trim());
        }
      });
      
      await Future.delayed(const Duration(seconds: 5));
      checkServerHealth();
      
    } catch (e) {
      state = ServerState(
        status: ServerStatus.error,
        message: 'Failed to start server: $e',
        lastCheck: DateTime.now(),
        logs: state.logs,
      );
    }
  }

  Future<void> stopServer() async {
    _serverProcess?.kill();
    _serverProcess = null;
    state = state.copyWith(
      status: ServerStatus.offline,
      message: 'Server stopped',
    );
  }

  @override
  void dispose() {
    _healthCheckTimer?.cancel();
    _serverProcess?.kill();
    super.dispose();
  }
}

final serverStatusProvider = StateNotifierProvider<ServerStatusNotifier, ServerState>((ref) {
  final dio = ref.watch(dioProvider);
  return ServerStatusNotifier(dio);
});

final dioProvider = Provider<Dio>((ref) {
  return Dio();
});

/// Fetches the last N lines from the backend server logs.
final serverLogsProvider = FutureProvider.autoDispose<List<String>>((ref) async {
  final dio = ref.watch(dioProvider);
  try {
    final resp = await dio.get(
      'http://localhost:8000/logs',
      queryParameters: {'tail': 500},
      options: Options(
        receiveTimeout: const Duration(seconds: 2),
        sendTimeout: const Duration(seconds: 2),
      ),
    );
    final data = resp.data;
    if (data is Map && data['lines'] is List) {
      return List<String>.from(data['lines']);
    }
  } catch (_) {
    // ignore
  }
  return const <String>[];
});

/// Returns the list of current jobs from the API (sorted by updated_at).
final jobsListProvider = FutureProvider.autoDispose<List<Map<String, dynamic>>>((ref) async {
  final dio = ref.watch(dioProvider);
  try {
    final resp = await dio.get(
      'http://localhost:8000/jobs',
      options: Options(
        receiveTimeout: const Duration(seconds: 2),
        sendTimeout: const Duration(seconds: 2),
      ),
    );
    final data = resp.data;
    if (data is List) {
      return data.cast<Map>().map((e) => e.cast<String, dynamic>()).toList();
    }
  } catch (_) {}
  return const <Map<String, dynamic>>[];
});
</file>

<file path="lib/features/leads/presentation/widgets/empty_state.dart">
import 'package:flutter/material.dart';
import '../../../../core/theme/app_theme.dart';

class EmptyState extends StatefulWidget {
  final String title;
  final String description;
  final IconData icon;
  final String? buttonText;
  final VoidCallback? onButtonPressed;
  
  const EmptyState({
    super.key,
    required this.title,
    required this.description,
    required this.icon,
    this.buttonText,
    this.onButtonPressed,
  });

  @override
  State<EmptyState> createState() => _EmptyStateState();
}

class _EmptyStateState extends State<EmptyState>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    
    _bounceAnimation = Tween<double>(
      begin: 0,
      end: 10,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Container(
        constraints: const BoxConstraints(maxWidth: 400),
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            AnimatedBuilder(
              animation: _bounceAnimation,
              builder: (context, child) {
                return Transform.translate(
                  offset: Offset(0, -_bounceAnimation.value),
                  child: Container(
                    width: 120,
                    height: 120,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          AppTheme.lightGray,
                          Colors.white,
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: AppTheme.mediumGray.withOpacity(0.2),
                          blurRadius: 30,
                          offset: const Offset(0, 15),
                        ),
                      ],
                    ),
                    child: Icon(
                      widget.icon,
                      size: 60,
                      color: AppTheme.mediumGray,
                    ),
                  ),
                );
              },
            ),
            const SizedBox(height: 32),
            Text(
              widget.title,
              style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                fontWeight: FontWeight.w700,
                color: AppTheme.darkGray,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 12),
            Text(
              widget.description,
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: AppTheme.mediumGray,
                height: 1.5,
              ),
              textAlign: TextAlign.center,
            ),
            if (widget.buttonText != null && widget.onButtonPressed != null) ...[
              const SizedBox(height: 32),
              ElevatedButton.icon(
                onPressed: widget.onButtonPressed,
                icon: const Icon(Icons.add),
                label: Text(widget.buttonText!),
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primaryIndigo,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 24,
                    vertical: 16,
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/leads/presentation/widgets/loading_state.dart">
import 'package:flutter/material.dart';
import '../../../../core/theme/app_theme.dart';

class LoadingState extends StatefulWidget {
  final String message;
  final String? submessage;
  final List<String>? logs;
  final double? progress;
  
  const LoadingState({
    super.key,
    required this.message,
    this.submessage,
    this.logs,
    this.progress,
  });

  @override
  State<LoadingState> createState() => _LoadingStateState();
}

class _LoadingStateState extends State<LoadingState>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: ScaleTransition(
        scale: _scaleAnimation,
        child: Center(
          child: Container(
            constraints: const BoxConstraints(maxWidth: 400),
            padding: const EdgeInsets.all(32),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        AppTheme.primaryIndigo,
                        AppTheme.accentPurple,
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: AppTheme.primaryIndigo.withOpacity(0.3),
                        blurRadius: 20,
                        offset: const Offset(0, 10),
                      ),
                    ],
                  ),
                  child: const Center(
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 3,
                    ),
                  ),
                ),
                const SizedBox(height: 32),
                Text(
                  widget.message,
                  style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                    fontWeight: FontWeight.w700,
                  ),
                  textAlign: TextAlign.center,
                ),
                if (widget.submessage != null) ...[
                  const SizedBox(height: 8),
                  Text(
                    widget.submessage!,
                    style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                      color: AppTheme.mediumGray,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
                if (widget.progress != null) ...[
                  const SizedBox(height: 24),
                  Container(
                    height: 6,
                    decoration: BoxDecoration(
                      color: AppTheme.lightGray,
                      borderRadius: BorderRadius.circular(3),
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(3),
                      child: LinearProgressIndicator(
                        value: widget.progress,
                        backgroundColor: Colors.transparent,
                        valueColor: AlwaysStoppedAnimation<Color>(
                          AppTheme.primaryIndigo,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '${(widget.progress! * 100).toInt()}%',
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                      color: AppTheme.primaryIndigo,
                    ),
                  ),
                ],
                if (widget.logs != null && widget.logs!.isNotEmpty) ...[
                  const SizedBox(height: 24),
                  Container(
                    constraints: const BoxConstraints(maxHeight: 150),
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: AppTheme.darkGray,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: SingleChildScrollView(
                      reverse: true,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: widget.logs!.map((log) => Padding(
                          padding: const EdgeInsets.only(bottom: 4),
                          child: Text(
                            '• $log',
                            style: const TextStyle(
                              fontFamily: 'monospace',
                              fontSize: 12,
                              color: AppTheme.successGreen,
                            ),
                          ),
                        )).toList(),
                      ),
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/features/leads/presentation/widgets/server_status_indicator.dart">
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/server_status_provider.dart';

class ServerStatusIndicator extends ConsumerWidget {
  const ServerStatusIndicator({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final serverState = ref.watch(serverStatusProvider);
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: _getBackgroundColor(serverState.status).withOpacity(0.1),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: _getBackgroundColor(serverState.status).withOpacity(0.3),
          width: 1,
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildStatusIcon(serverState.status),
          const SizedBox(width: 8),
          Flexible(
            child: Text(
              _getStatusText(serverState.status),
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.bold,
                color: _getBackgroundColor(serverState.status),
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
          if (serverState.status == ServerStatus.checking ||
              serverState.status == ServerStatus.starting)
            const Padding(
              padding: EdgeInsets.only(left: 8),
              child: SizedBox(
                width: 12,
                height: 12,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildStatusIcon(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return const Icon(
          Icons.check_circle,
          color: Colors.green,
          size: 16,
        );
      case ServerStatus.offline:
        return const Icon(
          Icons.cancel,
          color: Colors.red,
          size: 16,
        );
      case ServerStatus.checking:
      case ServerStatus.starting:
        return const Icon(
          Icons.sync,
          color: Colors.orange,
          size: 16,
        );
      case ServerStatus.error:
        return const Icon(
          Icons.error,
          color: Colors.red,
          size: 16,
        );
    }
  }

  Color _getBackgroundColor(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return Colors.green;
      case ServerStatus.offline:
      case ServerStatus.error:
        return Colors.red;
      case ServerStatus.checking:
      case ServerStatus.starting:
        return Colors.orange;
    }
  }

  String _getStatusText(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return 'Server Online';
      case ServerStatus.offline:
        return 'Server Offline';
      case ServerStatus.checking:
        return 'Checking...';
      case ServerStatus.starting:
        return 'Starting Server...';
      case ServerStatus.error:
        return 'Server Error';
    }
  }
}

class ServerStatusBadge extends ConsumerWidget {
  const ServerStatusBadge({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final serverState = ref.watch(serverStatusProvider);
    
    return Positioned(
      bottom: 16,
      right: 16,
      child: Material(
        elevation: 4,
        borderRadius: BorderRadius.circular(8),
        child: InkWell(
          onTap: () {
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: const Text('Server Status'),
                content: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildInfoRow('Status', _getStatusText(serverState.status)),
                    if (serverState.message != null)
                      _buildInfoRow('Message', serverState.message!),
                    if (serverState.lastCheck != null)
                      _buildInfoRow(
                        'Last Check',
                        '${serverState.lastCheck!.hour.toString().padLeft(2, '0')}:'
                        '${serverState.lastCheck!.minute.toString().padLeft(2, '0')}:'
                        '${serverState.lastCheck!.second.toString().padLeft(2, '0')}',
                      ),
                    const SizedBox(height: 16),
                    const Text(
                      'Server URL: http://localhost:8000',
                      style: TextStyle(fontSize: 12, color: Colors.grey),
                    ),
                  ],
                ),
                actions: [
                  if (serverState.status == ServerStatus.offline)
                    TextButton(
                      onPressed: () {
                        ref.read(serverStatusProvider.notifier).checkServerHealth();
                        Navigator.of(context).pop();
                      },
                      child: const Text('Retry'),
                    ),
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('Close'),
                  ),
                ],
              ),
            );
          },
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: const EdgeInsets.all(12),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildStatusDot(serverState.status),
                const SizedBox(width: 8),
                Text(
                  _getShortStatusText(serverState.status),
                  style: const TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildStatusDot(ServerStatus status) {
    Color color;
    switch (status) {
      case ServerStatus.online:
        color = Colors.green;
        break;
      case ServerStatus.offline:
      case ServerStatus.error:
        color = Colors.red;
        break;
      case ServerStatus.checking:
      case ServerStatus.starting:
        color = Colors.orange;
        break;
    }
    
    return Container(
      width: 8,
      height: 8,
      decoration: BoxDecoration(
        color: color,
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.5),
            blurRadius: 4,
            spreadRadius: 1,
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 14),
            ),
          ),
        ],
      ),
    );
  }

  String _getStatusText(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return 'Online';
      case ServerStatus.offline:
        return 'Offline';
      case ServerStatus.checking:
        return 'Checking';
      case ServerStatus.starting:
        return 'Starting';
      case ServerStatus.error:
        return 'Error';
    }
  }

  String _getShortStatusText(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return 'Server';
      case ServerStatus.offline:
        return 'Offline';
      case ServerStatus.checking:
        return 'Checking';
      case ServerStatus.starting:
        return 'Starting';
      case ServerStatus.error:
        return 'Error';
    }
  }
}
</file>

<file path="lib/main.dart">
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'core/theme/app_theme.dart';
import 'features/leads/presentation/pages/leads_list_page_v2.dart';
import 'features/leads/presentation/pages/lead_detail_page.dart';
import 'features/leads/presentation/pages/run_scrape_page.dart';
import 'features/leads/presentation/pages/scrape_monitor_page.dart';
import 'features/leads/presentation/pages/server_diagnostics_page.dart';
import 'features/leads/presentation/providers/scrape_form_provider.dart';
import 'features/leads/presentation/providers/server_status_provider.dart';

String _envForPlatform() {
  if (kIsWeb) return '.env.web';
  if (Platform.isMacOS) return '.env.macos';
  if (Platform.isAndroid) return '.env.android';
  return '.env';
}

void main() async {
  await dotenv.load(fileName: ".env");
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: '.env');
  final prefs = await SharedPreferences.getInstance();
  
  runApp(
    ProviderScope(
      overrides: [
        scrapeFormProvider.overrideWith(
          (ref) => ScrapeFormNotifier(prefs),
        ),
      ],
      child: const LeadLoqApp(),
    ),
  );
}

class LeadLoqApp extends ConsumerStatefulWidget {
  const LeadLoqApp({super.key});

  @override
  ConsumerState<LeadLoqApp> createState() => _LeadLoqAppState();
}

class _LeadLoqAppState extends ConsumerState<LeadLoqApp> {
  late final GoRouter _router;

  @override
  void initState() {
    super.initState();

    // Create the router once so route state isn't reset on rebuilds.
    _router = GoRouter(
      initialLocation: '/',
      routes: [
        GoRoute(
          path: '/',
          redirect: (context, state) => '/leads',
        ),
        GoRoute(
          path: '/leads',
          builder: (context, state) {
            final filter = state.uri.queryParameters['filter'];
            return LeadsListPageV2(initialFilter: filter);
          },
        ),
        GoRoute(
          path: '/leads/:id',
          builder: (context, state) {
            final leadId = state.pathParameters['id']!;
            return LeadDetailPage(leadId: leadId);
          },
        ),
        GoRoute(
          path: '/scrape',
          builder: (context, state) => const RunScrapePage(),
        ),
        GoRoute(
          path: '/scrape/monitor/:jobId',
          builder: (context, state) {
            final jobId = state.pathParameters['jobId']!;
            return ScrapeMonitorPage(jobId: jobId);
          },
        ),
        GoRoute(
          path: '/server',
          builder: (context, state) => const ServerDiagnosticsPage(),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    // Listen without rebuilding the app on status polls.
    ref.listen(serverStatusProvider, (_, __) {});
    return MaterialApp.router(
      title: 'LeadLoq',
      theme: AppTheme.lightTheme(),
      debugShowCheckedModeBanner: false,
      routerConfig: _router,
    );
  }
}
</file>

<file path="macos/Flutter/Flutter-Debug.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
#include "ephemeral/Flutter-Generated.xcconfig"
</file>

<file path="macos/Flutter/Flutter-Release.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
#include "ephemeral/Flutter-Generated.xcconfig"
</file>

<file path="macos/Flutter/GeneratedPluginRegistrant.swift">
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import shared_preferences_foundation
import url_launcher_macos

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: "SharedPreferencesPlugin"))
  UrlLauncherPlugin.register(with: registry.registrar(forPlugin: "UrlLauncherPlugin"))
}
</file>

<file path="macos/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_16.png",
      "scale" : "1x"
    },
    {
      "size" : "16x16",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "2x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_32.png",
      "scale" : "1x"
    },
    {
      "size" : "32x32",
      "idiom" : "mac",
      "filename" : "app_icon_64.png",
      "scale" : "2x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_128.png",
      "scale" : "1x"
    },
    {
      "size" : "128x128",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "2x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_256.png",
      "scale" : "1x"
    },
    {
      "size" : "256x256",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "2x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_512.png",
      "scale" : "1x"
    },
    {
      "size" : "512x512",
      "idiom" : "mac",
      "filename" : "app_icon_1024.png",
      "scale" : "2x"
    }
  ],
  "info" : {
    "version" : 1,
    "author" : "xcode"
  }
}
</file>

<file path="macos/Runner/Base.lproj/MainMenu.xib">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="14490.70" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES" customObjectInstantitationMethod="direct">
    <dependencies>
        <deployment identifier="macosx"/>
        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="14490.70"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <objects>
        <customObject id="-2" userLabel="File's Owner" customClass="NSApplication">
            <connections>
                <outlet property="delegate" destination="Voe-Tx-rLC" id="GzC-gU-4Uq"/>
            </connections>
        </customObject>
        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
        <customObject id="Voe-Tx-rLC" customClass="AppDelegate" customModule="Runner" customModuleProvider="target">
            <connections>
                <outlet property="applicationMenu" destination="uQy-DD-JDr" id="XBo-yE-nKs"/>
                <outlet property="mainFlutterWindow" destination="QvC-M9-y7g" id="gIp-Ho-8D9"/>
            </connections>
        </customObject>
        <customObject id="YLy-65-1bz" customClass="NSFontManager"/>
        <menu title="Main Menu" systemMenu="main" id="AYu-sK-qS6">
            <items>
                <menuItem title="APP_NAME" id="1Xt-HY-uBw">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="APP_NAME" systemMenu="apple" id="uQy-DD-JDr">
                        <items>
                            <menuItem title="About APP_NAME" id="5kV-Vb-QxS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="orderFrontStandardAboutPanel:" target="-1" id="Exp-CZ-Vem"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="VOq-y0-SEH"/>
                            <menuItem title="Preferences…" keyEquivalent="," id="BOF-NM-1cW"/>
                            <menuItem isSeparatorItem="YES" id="wFC-TO-SCJ"/>
                            <menuItem title="Services" id="NMo-om-nkz">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Services" systemMenu="services" id="hz9-B4-Xy5"/>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="4je-JR-u6R"/>
                            <menuItem title="Hide APP_NAME" keyEquivalent="h" id="Olw-nP-bQN">
                                <connections>
                                    <action selector="hide:" target="-1" id="PnN-Uc-m68"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Hide Others" keyEquivalent="h" id="Vdr-fp-XzO">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="hideOtherApplications:" target="-1" id="VT4-aY-XCT"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Show All" id="Kd2-mp-pUS">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="unhideAllApplications:" target="-1" id="Dhg-Le-xox"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="kCx-OE-vgT"/>
                            <menuItem title="Quit APP_NAME" keyEquivalent="q" id="4sb-4s-VLi">
                                <connections>
                                    <action selector="terminate:" target="-1" id="Te7-pn-YzF"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Edit" id="5QF-Oa-p0T">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Edit" id="W48-6f-4Dl">
                        <items>
                            <menuItem title="Undo" keyEquivalent="z" id="dRJ-4n-Yzg">
                                <connections>
                                    <action selector="undo:" target="-1" id="M6e-cu-g7V"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Redo" keyEquivalent="Z" id="6dh-zS-Vam">
                                <connections>
                                    <action selector="redo:" target="-1" id="oIA-Rs-6OD"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="WRV-NI-Exz"/>
                            <menuItem title="Cut" keyEquivalent="x" id="uRl-iY-unG">
                                <connections>
                                    <action selector="cut:" target="-1" id="YJe-68-I9s"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Copy" keyEquivalent="c" id="x3v-GG-iWU">
                                <connections>
                                    <action selector="copy:" target="-1" id="G1f-GL-Joy"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste" keyEquivalent="v" id="gVA-U4-sdL">
                                <connections>
                                    <action selector="paste:" target="-1" id="UvS-8e-Qdg"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Paste and Match Style" keyEquivalent="V" id="WeT-3V-zwk">
                                <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                <connections>
                                    <action selector="pasteAsPlainText:" target="-1" id="cEh-KX-wJQ"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Delete" id="pa3-QI-u2k">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="delete:" target="-1" id="0Mk-Ml-PaM"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Select All" keyEquivalent="a" id="Ruw-6m-B2m">
                                <connections>
                                    <action selector="selectAll:" target="-1" id="VNm-Mi-diN"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="uyl-h8-XO2"/>
                            <menuItem title="Find" id="4EN-yA-p0u">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Find" id="1b7-l0-nxx">
                                    <items>
                                        <menuItem title="Find…" tag="1" keyEquivalent="f" id="Xz5-n4-O0W">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="cD7-Qs-BN4"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find and Replace…" tag="12" keyEquivalent="f" id="YEy-JH-Tfz">
                                            <modifierMask key="keyEquivalentModifierMask" option="YES" command="YES"/>
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="WD3-Gg-5AJ"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Next" tag="2" keyEquivalent="g" id="q09-fT-Sye">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="NDo-RZ-v9R"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Find Previous" tag="3" keyEquivalent="G" id="OwM-mh-QMV">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="HOh-sY-3ay"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Use Selection for Find" tag="7" keyEquivalent="e" id="buJ-ug-pKt">
                                            <connections>
                                                <action selector="performFindPanelAction:" target="-1" id="U76-nv-p5D"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Jump to Selection" keyEquivalent="j" id="S0p-oC-mLd">
                                            <connections>
                                                <action selector="centerSelectionInVisibleArea:" target="-1" id="IOG-6D-g5B"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Spelling and Grammar" id="Dv1-io-Yv7">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Spelling" id="3IN-sU-3Bg">
                                    <items>
                                        <menuItem title="Show Spelling and Grammar" keyEquivalent=":" id="HFo-cy-zxI">
                                            <connections>
                                                <action selector="showGuessPanel:" target="-1" id="vFj-Ks-hy3"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Document Now" keyEquivalent=";" id="hz2-CU-CR7">
                                            <connections>
                                                <action selector="checkSpelling:" target="-1" id="fz7-VC-reM"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="bNw-od-mp5"/>
                                        <menuItem title="Check Spelling While Typing" id="rbD-Rh-wIN">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleContinuousSpellChecking:" target="-1" id="7w6-Qz-0kB"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Check Grammar With Spelling" id="mK6-2p-4JG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleGrammarChecking:" target="-1" id="muD-Qn-j4w"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Correct Spelling Automatically" id="78Y-hA-62v">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticSpellingCorrection:" target="-1" id="2lM-Qi-WAP"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Substitutions" id="9ic-FL-obx">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Substitutions" id="FeM-D8-WVr">
                                    <items>
                                        <menuItem title="Show Substitutions" id="z6F-FW-3nz">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="orderFrontSubstitutionsPanel:" target="-1" id="oku-mr-iSq"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem isSeparatorItem="YES" id="gPx-C9-uUO"/>
                                        <menuItem title="Smart Copy/Paste" id="9yt-4B-nSM">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleSmartInsertDelete:" target="-1" id="3IJ-Se-DZD"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Quotes" id="hQb-2v-fYv">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticQuoteSubstitution:" target="-1" id="ptq-xd-QOA"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Dashes" id="rgM-f4-ycn">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDashSubstitution:" target="-1" id="oCt-pO-9gS"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Smart Links" id="cwL-P1-jid">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticLinkDetection:" target="-1" id="Gip-E3-Fov"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Data Detectors" id="tRr-pd-1PS">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticDataDetection:" target="-1" id="R1I-Nq-Kbl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Text Replacement" id="HFQ-gK-NFA">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="toggleAutomaticTextReplacement:" target="-1" id="DvP-Fe-Py6"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Transformations" id="2oI-Rn-ZJC">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Transformations" id="c8a-y6-VQd">
                                    <items>
                                        <menuItem title="Make Upper Case" id="vmV-6d-7jI">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="uppercaseWord:" target="-1" id="sPh-Tk-edu"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Make Lower Case" id="d9M-CD-aMd">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="lowercaseWord:" target="-1" id="iUZ-b5-hil"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Capitalize" id="UEZ-Bs-lqG">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="capitalizeWord:" target="-1" id="26H-TL-nsh"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                            <menuItem title="Speech" id="xrE-MZ-jX0">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <menu key="submenu" title="Speech" id="3rS-ZA-NoH">
                                    <items>
                                        <menuItem title="Start Speaking" id="Ynk-f8-cLZ">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="startSpeaking:" target="-1" id="654-Ng-kyl"/>
                                            </connections>
                                        </menuItem>
                                        <menuItem title="Stop Speaking" id="Oyz-dy-DGm">
                                            <modifierMask key="keyEquivalentModifierMask"/>
                                            <connections>
                                                <action selector="stopSpeaking:" target="-1" id="dX8-6p-jy9"/>
                                            </connections>
                                        </menuItem>
                                    </items>
                                </menu>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="View" id="H8h-7b-M4v">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="View" id="HyV-fh-RgO">
                        <items>
                            <menuItem title="Enter Full Screen" keyEquivalent="f" id="4J7-dP-txa">
                                <modifierMask key="keyEquivalentModifierMask" control="YES" command="YES"/>
                                <connections>
                                    <action selector="toggleFullScreen:" target="-1" id="dU3-MA-1Rq"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Window" id="aUF-d1-5bR">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Window" systemMenu="window" id="Td7-aD-5lo">
                        <items>
                            <menuItem title="Minimize" keyEquivalent="m" id="OY7-WF-poV">
                                <connections>
                                    <action selector="performMiniaturize:" target="-1" id="VwT-WD-YPe"/>
                                </connections>
                            </menuItem>
                            <menuItem title="Zoom" id="R4o-n2-Eq4">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="performZoom:" target="-1" id="DIl-cC-cCs"/>
                                </connections>
                            </menuItem>
                            <menuItem isSeparatorItem="YES" id="eu3-7i-yIM"/>
                            <menuItem title="Bring All to Front" id="LE2-aR-0XJ">
                                <modifierMask key="keyEquivalentModifierMask"/>
                                <connections>
                                    <action selector="arrangeInFront:" target="-1" id="DRN-fu-gQh"/>
                                </connections>
                            </menuItem>
                        </items>
                    </menu>
                </menuItem>
                <menuItem title="Help" id="EPT-qC-fAb">
                    <modifierMask key="keyEquivalentModifierMask"/>
                    <menu key="submenu" title="Help" systemMenu="help" id="rJ0-wn-3NY"/>
                </menuItem>
            </items>
            <point key="canvasLocation" x="142" y="-258"/>
        </menu>
        <window title="APP_NAME" allowsToolTipsWhenApplicationIsInactive="NO" autorecalculatesKeyViewLoop="NO" releasedWhenClosed="NO" animationBehavior="default" id="QvC-M9-y7g" customClass="MainFlutterWindow" customModule="Runner" customModuleProvider="target">
            <windowStyleMask key="styleMask" titled="YES" closable="YES" miniaturizable="YES" resizable="YES"/>
            <rect key="contentRect" x="335" y="390" width="800" height="600"/>
            <rect key="screenRect" x="0.0" y="0.0" width="2560" height="1577"/>
            <view key="contentView" wantsLayer="YES" id="EiT-Mj-1SZ">
                <rect key="frame" x="0.0" y="0.0" width="800" height="600"/>
                <autoresizingMask key="autoresizingMask"/>
            </view>
        </window>
    </objects>
</document>
</file>

<file path="macos/Runner/Configs/AppInfo.xcconfig">
// Application-level settings for the Runner target.
//
// This may be replaced with something auto-generated from metadata (e.g., pubspec.yaml) in the
// future. If not, the values below would default to using the project name when this becomes a
// 'flutter create' template.

// The application's name. By default this is also the title of the Flutter window.
PRODUCT_NAME = LeadLawk

// The application's bundle identifier
PRODUCT_BUNDLE_IDENTIFIER = com.leadlawk.app

// The copyright displayed in application information
PRODUCT_COPYRIGHT = Copyright © 2025 LeadLawk. All rights reserved.
</file>

<file path="macos/Runner/Configs/Debug.xcconfig">
#include "../../Flutter/Flutter-Debug.xcconfig"
#include "Warnings.xcconfig"
</file>

<file path="macos/Runner/Configs/Release.xcconfig">
#include "../../Flutter/Flutter-Release.xcconfig"
#include "Warnings.xcconfig"
</file>

<file path="macos/Runner/Configs/Warnings.xcconfig">
WARNING_CFLAGS = -Wall -Wconditional-uninitialized -Wnullable-to-nonnull-conversion -Wmissing-method-return-type -Woverlength-strings
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY = YES
CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_PRAGMA_PACK = YES
CLANG_WARN_STRICT_PROTOTYPES = YES
CLANG_WARN_COMMA = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
GCC_WARN_SHADOW = YES
CLANG_WARN_UNREACHABLE_CODE = YES
</file>

<file path="macos/Runner/AppDelegate.swift">
import Cocoa
import FlutterMacOS

@main
class AppDelegate: FlutterAppDelegate {
  override func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
    return true
  }

  override func applicationSupportsSecureRestorableState(_ app: NSApplication) -> Bool {
    return true
  }
}
</file>

<file path="macos/Runner/DebugProfile.entitlements">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
	<key>com.apple.security.cs.allow-jit</key>
	<true/>
	<key>com.apple.security.network.server</key>
	<true/>
	<key>com.apple.security.network.client</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$(PRODUCT_NAME)</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSMinimumSystemVersion</key>
	<string>$(MACOSX_DEPLOYMENT_TARGET)</string>
	<key>NSHumanReadableCopyright</key>
	<string>$(PRODUCT_COPYRIGHT)</string>
	<key>NSMainNibFile</key>
	<string>MainMenu</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>
</file>

<file path="macos/Runner/MainFlutterWindow.swift">
import Cocoa
import FlutterMacOS

class MainFlutterWindow: NSWindow {
  override func awakeFromNib() {
    let flutterViewController = FlutterViewController()
    let windowFrame = self.frame
    self.contentViewController = flutterViewController
    self.setFrame(windowFrame, display: true)

    RegisterGeneratedPlugins(registry: flutterViewController)

    super.awakeFromNib()
  }
}
</file>

<file path="macos/Runner/Release.entitlements">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
	<key>com.apple.security.network.client</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "33CC10EC2044A3C60003C045"
               BuildableName = "leadforge_app.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "leadforge_app.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C80D4294CF70F00263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      enableGPUValidationMode = "1"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "leadforge_app.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "33CC10EC2044A3C60003C045"
            BuildableName = "leadforge_app.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="macos/Runner.xcodeproj/project.pbxproj">
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXAggregateTarget section */
		33CC111A2044C6BA0003C045 /* Flutter Assemble */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */;
			buildPhases = (
				33CC111E2044C6BF0003C045 /* ShellScript */,
			);
			dependencies = (
			);
			name = "Flutter Assemble";
			productName = FLX;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C80D7294CF71000263BE5 /* RunnerTests.swift */; };
		335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */ = {isa = PBXBuildFile; fileRef = 335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */; };
		33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC10F02044A3C60003C045 /* AppDelegate.swift */; };
		33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F22044A3C60003C045 /* Assets.xcassets */; };
		33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */ = {isa = PBXBuildFile; fileRef = 33CC10F42044A3C60003C045 /* MainMenu.xib */; };
		33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */ = {isa = PBXBuildFile; fileRef = 33CC11122044BFA00003C045 /* MainFlutterWindow.swift */; };
		4BC6026FABABDB39D5B656D1 /* Pods_RunnerTests.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 7F24B6A9CDA7E2F52D92745C /* Pods_RunnerTests.framework */; };
		7BF248D22024A7646254A9CC /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 4EB4990F54C778FEB5C39D62 /* Pods_Runner.framework */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C80D9294CF71000263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC10EC2044A3C60003C045;
			remoteInfo = Runner;
		};
		33CC111F2044C79F0003C045 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 33CC10E52044A3C60003C045 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 33CC111A2044C6BA0003C045;
			remoteInfo = FLX;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		33CC110E2044A8840003C045 /* Bundle Framework */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Bundle Framework";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		282EB20C1E4673460C240520 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
		331C80D5294CF71000263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		331C80D7294CF71000263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		333000ED22D3DE5D00554162 /* Warnings.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Warnings.xcconfig; sourceTree = "<group>"; };
		335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = GeneratedPluginRegistrant.swift; sourceTree = "<group>"; };
		33CC10ED2044A3C60003C045 /* leadforge_app.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = leadforge_app.app; sourceTree = BUILT_PRODUCTS_DIR; };
		33CC10F02044A3C60003C045 /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		33CC10F22044A3C60003C045 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; name = Assets.xcassets; path = Runner/Assets.xcassets; sourceTree = "<group>"; };
		33CC10F52044A3C60003C045 /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.xib; name = Base; path = Base.lproj/MainMenu.xib; sourceTree = "<group>"; };
		33CC10F72044A3C60003C045 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; name = Info.plist; path = Runner/Info.plist; sourceTree = "<group>"; };
		33CC11122044BFA00003C045 /* MainFlutterWindow.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = MainFlutterWindow.swift; sourceTree = "<group>"; };
		33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Debug.xcconfig"; sourceTree = "<group>"; };
		33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = "Flutter-Release.xcconfig"; sourceTree = "<group>"; };
		33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = "Flutter-Generated.xcconfig"; path = "ephemeral/Flutter-Generated.xcconfig"; sourceTree = "<group>"; };
		33E51913231747F40026EE4D /* DebugProfile.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = DebugProfile.entitlements; sourceTree = "<group>"; };
		33E51914231749380026EE4D /* Release.entitlements */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.entitlements; path = Release.entitlements; sourceTree = "<group>"; };
		33E5194F232828860026EE4D /* AppInfo.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = AppInfo.xcconfig; sourceTree = "<group>"; };
		39BDB77635FD117C76790360 /* Pods-RunnerTests.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.debug.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.debug.xcconfig"; sourceTree = "<group>"; };
		4EB4990F54C778FEB5C39D62 /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		6AEE2A00CBA40408650BD731 /* Pods-RunnerTests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.release.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.release.xcconfig"; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = Release.xcconfig; sourceTree = "<group>"; };
		7F24B6A9CDA7E2F52D92745C /* Pods_RunnerTests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_RunnerTests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		873B816B3E40D0A500FDE179 /* Pods-RunnerTests.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.profile.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.profile.xcconfig"; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Debug.xcconfig; sourceTree = "<group>"; };
		C6E3CDE8D9701FEA3484C43E /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
		DDE9A0DFA1D2F8799AD580ED /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		331C80D2294CF70F00263BE5 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				4BC6026FABABDB39D5B656D1 /* Pods_RunnerTests.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EA2044A3C60003C045 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				7BF248D22024A7646254A9CC /* Pods_Runner.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C80D6294CF71000263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C80D7294CF71000263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		33BA886A226E78AF003329D5 /* Configs */ = {
			isa = PBXGroup;
			children = (
				33E5194F232828860026EE4D /* AppInfo.xcconfig */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				333000ED22D3DE5D00554162 /* Warnings.xcconfig */,
			);
			path = Configs;
			sourceTree = "<group>";
		};
		33CC10E42044A3C60003C045 = {
			isa = PBXGroup;
			children = (
				33FAB671232836740065AC1E /* Runner */,
				33CEB47122A05771004F2AC0 /* Flutter */,
				331C80D6294CF71000263BE5 /* RunnerTests */,
				33CC10EE2044A3C60003C045 /* Products */,
				D73912EC22F37F3D000D13A0 /* Frameworks */,
				6F044A8B1BCFB5BD0F404F91 /* Pods */,
			);
			sourceTree = "<group>";
		};
		33CC10EE2044A3C60003C045 /* Products */ = {
			isa = PBXGroup;
			children = (
				33CC10ED2044A3C60003C045 /* leadforge_app.app */,
				331C80D5294CF71000263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		33CC11242044D66E0003C045 /* Resources */ = {
			isa = PBXGroup;
			children = (
				33CC10F22044A3C60003C045 /* Assets.xcassets */,
				33CC10F42044A3C60003C045 /* MainMenu.xib */,
				33CC10F72044A3C60003C045 /* Info.plist */,
			);
			name = Resources;
			path = ..;
			sourceTree = "<group>";
		};
		33CEB47122A05771004F2AC0 /* Flutter */ = {
			isa = PBXGroup;
			children = (
				335BBD1A22A9A15E00E9071D /* GeneratedPluginRegistrant.swift */,
				33CEB47222A05771004F2AC0 /* Flutter-Debug.xcconfig */,
				33CEB47422A05771004F2AC0 /* Flutter-Release.xcconfig */,
				33CEB47722A0578A004F2AC0 /* Flutter-Generated.xcconfig */,
			);
			path = Flutter;
			sourceTree = "<group>";
		};
		33FAB671232836740065AC1E /* Runner */ = {
			isa = PBXGroup;
			children = (
				33CC10F02044A3C60003C045 /* AppDelegate.swift */,
				33CC11122044BFA00003C045 /* MainFlutterWindow.swift */,
				33E51913231747F40026EE4D /* DebugProfile.entitlements */,
				33E51914231749380026EE4D /* Release.entitlements */,
				33CC11242044D66E0003C045 /* Resources */,
				33BA886A226E78AF003329D5 /* Configs */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
		6F044A8B1BCFB5BD0F404F91 /* Pods */ = {
			isa = PBXGroup;
			children = (
				282EB20C1E4673460C240520 /* Pods-Runner.debug.xcconfig */,
				DDE9A0DFA1D2F8799AD580ED /* Pods-Runner.release.xcconfig */,
				C6E3CDE8D9701FEA3484C43E /* Pods-Runner.profile.xcconfig */,
				39BDB77635FD117C76790360 /* Pods-RunnerTests.debug.xcconfig */,
				6AEE2A00CBA40408650BD731 /* Pods-RunnerTests.release.xcconfig */,
				873B816B3E40D0A500FDE179 /* Pods-RunnerTests.profile.xcconfig */,
			);
			name = Pods;
			path = Pods;
			sourceTree = "<group>";
		};
		D73912EC22F37F3D000D13A0 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				4EB4990F54C778FEB5C39D62 /* Pods_Runner.framework */,
				7F24B6A9CDA7E2F52D92745C /* Pods_RunnerTests.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C80D4294CF70F00263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				A4E82871384600AB26E88FC4 /* [CP] Check Pods Manifest.lock */,
				331C80D1294CF70F00263BE5 /* Sources */,
				331C80D2294CF70F00263BE5 /* Frameworks */,
				331C80D3294CF70F00263BE5 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				331C80DA294CF71000263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C80D5294CF71000263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		33CC10EC2044A3C60003C045 /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				9D70C3AC1796B1ED9B549E96 /* [CP] Check Pods Manifest.lock */,
				33CC10E92044A3C60003C045 /* Sources */,
				33CC10EA2044A3C60003C045 /* Frameworks */,
				33CC10EB2044A3C60003C045 /* Resources */,
				33CC110E2044A8840003C045 /* Bundle Framework */,
				3399D490228B24CF009A79C7 /* ShellScript */,
				CC8E592120A32BC2EA6C01AF /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				33CC11202044C79F0003C045 /* PBXTargetDependency */,
			);
			name = Runner;
			productName = Runner;
			productReference = 33CC10ED2044A3C60003C045 /* leadforge_app.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		33CC10E52044A3C60003C045 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastSwiftUpdateCheck = 0920;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C80D4294CF70F00263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 33CC10EC2044A3C60003C045;
					};
					33CC10EC2044A3C60003C045 = {
						CreatedOnToolsVersion = 9.2;
						LastSwiftMigration = 1100;
						ProvisioningStyle = Automatic;
						SystemCapabilities = {
							com.apple.Sandbox = {
								enabled = 1;
							};
						};
					};
					33CC111A2044C6BA0003C045 = {
						CreatedOnToolsVersion = 9.2;
						ProvisioningStyle = Manual;
					};
				};
			};
			buildConfigurationList = 33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 33CC10E42044A3C60003C045;
			productRefGroup = 33CC10EE2044A3C60003C045 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				33CC10EC2044A3C60003C045 /* Runner */,
				331C80D4294CF70F00263BE5 /* RunnerTests */,
				33CC111A2044C6BA0003C045 /* Flutter Assemble */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C80D3294CF70F00263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10EB2044A3C60003C045 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC10F32044A3C60003C045 /* Assets.xcassets in Resources */,
				33CC10F62044A3C60003C045 /* MainMenu.xib in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		3399D490228B24CF009A79C7 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
			);
			outputFileListPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "echo \"$PRODUCT_NAME.app\" > \"$PROJECT_DIR\"/Flutter/ephemeral/.app_filename && \"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh embed\n";
		};
		33CC111E2044C6BF0003C045 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				Flutter/ephemeral/FlutterInputs.xcfilelist,
			);
			inputPaths = (
				Flutter/ephemeral/tripwire,
			);
			outputFileListPaths = (
				Flutter/ephemeral/FlutterOutputs.xcfilelist,
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh && touch Flutter/ephemeral/tripwire";
		};
		9D70C3AC1796B1ED9B549E96 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		A4E82871384600AB26E88FC4 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-RunnerTests-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		CC8E592120A32BC2EA6C01AF /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C80D1294CF70F00263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C80D8294CF71000263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		33CC10E92044A3C60003C045 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				33CC11132044BFA00003C045 /* MainFlutterWindow.swift in Sources */,
				33CC10F12044A3C60003C045 /* AppDelegate.swift in Sources */,
				335BBD1B22A9A15E00E9071D /* GeneratedPluginRegistrant.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C80DA294CF71000263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC10EC2044A3C60003C045 /* Runner */;
			targetProxy = 331C80D9294CF71000263BE5 /* PBXContainerItemProxy */;
		};
		33CC11202044C79F0003C045 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 33CC111A2044C6BA0003C045 /* Flutter Assemble */;
			targetProxy = 33CC111F2044C79F0003C045 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		33CC10F42044A3C60003C045 /* MainMenu.xib */ = {
			isa = PBXVariantGroup;
			children = (
				33CC10F52044A3C60003C045 /* Base */,
			);
			name = MainMenu.xib;
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		331C80DB294CF71000263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 39BDB77635FD117C76790360 /* Pods-RunnerTests.debug.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/leadforge_app.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/leadforge_app";
			};
			name = Debug;
		};
		331C80DC294CF71000263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 6AEE2A00CBA40408650BD731 /* Pods-RunnerTests.release.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/leadforge_app.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/leadforge_app";
			};
			name = Release;
		};
		331C80DD294CF71000263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 873B816B3E40D0A500FDE179 /* Pods-RunnerTests.profile.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.leadforge.leadforgeApp.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/leadforge_app.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/leadforge_app";
			};
			name = Profile;
		};
		338D0CE9231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Profile;
		};
		338D0CEA231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Profile;
		};
		338D0CEB231458BD00FA5F75 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Profile;
		};
		33CC10F92044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		33CC10FA2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CODE_SIGN_IDENTITY = "-";
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.14;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		33CC10FC2044A3C60003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/DebugProfile.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		33CC10FD2044A3C60003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 33E5194F232828860026EE4D /* AppInfo.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Release.entitlements;
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				PROVISIONING_PROFILE_SPECIFIER = "";
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
		33CC111C2044C6BA0003C045 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Manual;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		33CC111D2044C6BA0003C045 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C80DE294CF71000263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C80DB294CF71000263BE5 /* Debug */,
				331C80DC294CF71000263BE5 /* Release */,
				331C80DD294CF71000263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10E82044A3C60003C045 /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10F92044A3C60003C045 /* Debug */,
				33CC10FA2044A3C60003C045 /* Release */,
				338D0CE9231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC10FB2044A3C60003C045 /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC10FC2044A3C60003C045 /* Debug */,
				33CC10FD2044A3C60003C045 /* Release */,
				338D0CEA231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		33CC111B2044C6BA0003C045 /* Build configuration list for PBXAggregateTarget "Flutter Assemble" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				33CC111C2044C6BA0003C045 /* Debug */,
				33CC111D2044C6BA0003C045 /* Release */,
				338D0CEB231458BD00FA5F75 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 33CC10E52044A3C60003C045 /* Project object */;
}
</file>

<file path="macos/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="macos/Runner.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>
</file>

<file path="macos/RunnerTests/RunnerTests.swift">
import Cocoa
import FlutterMacOS
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}
</file>

<file path="macos/.gitignore">
# Flutter-related
**/Flutter/ephemeral/
**/Pods/

# Xcode-related
**/dgph
**/xcuserdata/
</file>

<file path="macos/Podfile">
platform :osx, '10.14'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
  end
end
</file>

<file path="macos/Podfile.lock">
PODS:
  - FlutterMacOS (1.0.0)
  - shared_preferences_foundation (0.0.1):
    - Flutter
    - FlutterMacOS
  - url_launcher_macos (0.0.1):
    - FlutterMacOS

DEPENDENCIES:
  - FlutterMacOS (from `Flutter/ephemeral`)
  - shared_preferences_foundation (from `Flutter/ephemeral/.symlinks/plugins/shared_preferences_foundation/darwin`)
  - url_launcher_macos (from `Flutter/ephemeral/.symlinks/plugins/url_launcher_macos/macos`)

EXTERNAL SOURCES:
  FlutterMacOS:
    :path: Flutter/ephemeral
  shared_preferences_foundation:
    :path: Flutter/ephemeral/.symlinks/plugins/shared_preferences_foundation/darwin
  url_launcher_macos:
    :path: Flutter/ephemeral/.symlinks/plugins/url_launcher_macos/macos

SPEC CHECKSUMS:
  FlutterMacOS: 8f6f14fa908a6fb3fba0cd85dbd81ec4b251fb24
  shared_preferences_foundation: 9e1978ff2562383bd5676f64ec4e9aa8fa06a6f7
  url_launcher_macos: 0fba8ddabfc33ce0a9afe7c5fef5aab3d8d2d673

PODFILE CHECKSUM: 7eb978b976557c8c1cd717d8185ec483fd090a82

COCOAPODS: 1.16.2
</file>

<file path="server/scraper/gmaps_scraper.py">
"""
Google Maps Scraper using Selenium
Finds businesses without websites in a specific category and location
"""

import time
import re
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import SessionLocal
from models import Lead, LeadStatus


class GoogleMapsScraper:
    def __init__(self, headless=True, job_id=None):
        self.job_id = job_id
        self.setup_driver(headless)
        
    def setup_driver(self, headless):
        """Setup Chrome driver with appropriate options"""
        chrome_options = Options()
        if headless:
            # Use new headless for recent Chrome versions
            chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # Try system chromedriver first, else use webdriver-manager to download
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
        except Exception:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.wait = WebDriverWait(self.driver, 10)
        
    def search_google_maps(self, query, location):
        """Search Google Maps for businesses"""
        search_query = f"{query} near {location}"
        url = f"https://www.google.com/maps/search/{search_query.replace(' ', '+')}"
        
        self.driver.get(url)
        time.sleep(3)  # Wait for initial load
        
        # Wait for results to load
        try:
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[role='article']")))
        except TimeoutException:
            print(f"No results found for {search_query}")
            return []
            
    def extract_business_info(self, element):
        """Extract business information from a result element"""
        try:
            info = {}
            
            # Business name
            name_elem = element.find_element(By.CSS_SELECTOR, "a[aria-label]")
            info['business_name'] = name_elem.get_attribute("aria-label")
            
            # Click to open details
            name_elem.click()
            time.sleep(2)
            
            # Extract details from side panel
            details_panel = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div[role='main']"))
            )
            
            # Phone number
            try:
                phone_elem = details_panel.find_element(By.CSS_SELECTOR, "button[data-tooltip*='phone']")
                info['phone'] = phone_elem.get_attribute("aria-label").replace("Phone:", "").strip()
            except NoSuchElementException:
                info['phone'] = None
                
            # Website
            try:
                website_elem = details_panel.find_element(By.CSS_SELECTOR, "a[data-tooltip*='website']")
                info['website_url'] = website_elem.get_attribute("href")
                info['has_website'] = True
            except NoSuchElementException:
                info['website_url'] = None
                info['has_website'] = False
                
            # Rating
            try:
                rating_elem = details_panel.find_element(By.CSS_SELECTOR, "span[role='img'][aria-label*='stars']")
                rating_text = rating_elem.get_attribute("aria-label")
                info['rating'] = float(re.search(r'([\d.]+)', rating_text).group(1))
            except (NoSuchElementException, AttributeError):
                info['rating'] = None
                
            # Review count
            try:
                review_elem = details_panel.find_element(By.CSS_SELECTOR, "button[aria-label*='reviews']")
                review_text = review_elem.get_attribute("aria-label")
                review_match = re.search(r'(\d+)', review_text)
                info['review_count'] = int(review_match.group(1)) if review_match else 0
            except (NoSuchElementException, AttributeError):
                info['review_count'] = 0
                
            # Profile URL
            info['profile_url'] = self.driver.current_url
            
            return info
            
        except Exception as e:
            print(f"Error extracting business info: {e}")
            return None
            
    def scrape(self, industry, location, limit=50, min_rating=4.0, min_reviews=3):
        """Main scraping function"""
        results = []
        
        try:
            self.search_google_maps(industry, location)
            
            # Scroll to load more results
            results_container = self.driver.find_element(By.CSS_SELECTOR, "div[role='feed']")
            
            for _ in range(min(5, limit // 10)):  # Scroll up to 5 times
                self.driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", results_container)
                time.sleep(2)
                
            # Get all business elements
            business_elements = self.driver.find_elements(By.CSS_SELECTOR, "[role='article']")
            
            for idx, element in enumerate(business_elements[:limit]):
                if idx % 10 == 0:
                    print(f"Processing business {idx + 1}/{min(len(business_elements), limit)}")
                    
                info = self.extract_business_info(element)
                
                if info and info.get('phone'):
                    # Filter based on criteria
                    meets_rating = info.get('rating', 0) >= min_rating
                    has_enough_reviews = info.get('review_count', 0) >= min_reviews
                    no_website = not info.get('has_website', True)
                    
                    info.update({
                        'industry': industry,
                        'location': location,
                        'source': 'google_maps',
                        'meets_rating_threshold': meets_rating,
                        'is_candidate': meets_rating and has_enough_reviews and no_website,
                        'last_review_date': datetime.utcnow() - timedelta(days=30),  # Placeholder
                        'has_recent_reviews': True,
                    })
                    
                    results.append(info)
                    self.save_to_db(info)
                    
                # Go back to results list
                self.driver.back()
                time.sleep(1)
                
        except Exception as e:
            print(f"Scraping error: {e}")
            
        finally:
            self.driver.quit()
            
        return results
        
    def save_to_db(self, item):
        """Save lead to database"""
        db = SessionLocal()
        try:
            existing = db.query(Lead).filter(
                Lead.business_name == item['business_name'],
                Lead.phone == item['phone']
            ).first()
            
            if existing:
                for key, value in item.items():
                    setattr(existing, key, value)
                existing.updated_at = datetime.utcnow()
            else:
                lead = Lead(**item)
                db.add(lead)
                
            db.commit()
        finally:
            db.close()


if __name__ == "__main__":
    # Test the scraper
    scraper = GoogleMapsScraper(headless=False)
    results = scraper.scrape("Plumber", "Omaha, NE", limit=10)
    print(f"Found {len(results)} businesses without websites")
    for r in results:
        if r['is_candidate']:
            print(f"- {r['business_name']}: {r['phone']} (Rating: {r.get('rating', 'N/A')})")
</file>

<file path="server/scraper/gmaps_spider.py">
import scrapy
from datetime import datetime, timedelta
import re
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import SessionLocal
from models import Lead, LeadStatus

# Try to import the real scraper; do NOT fallback to mock unless explicitly requested
try:
    from scraper.gmaps_scraper import GoogleMapsScraper
    REAL_SCRAPER_AVAILABLE = True
except ImportError:
    REAL_SCRAPER_AVAILABLE = False
    print("Selenium/driver not available. Real scraper disabled.")


class GMapsSpider(scrapy.Spider):
    name = 'gmaps'
    
    def __init__(self, industry='', location='', limit=50, min_rating=4.0, 
                 min_reviews=3, recent_days=365, job_id=None, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.industry = industry
        self.location = location
        self.limit = int(limit)
        self.min_rating = float(min_rating)
        self.min_reviews = int(min_reviews)
        self.recent_days = int(recent_days)
        self.job_id = job_id
        self.processed_count = 0
        
        query = f"{industry} {location}".replace(' ', '+')
        self.start_urls = [
            f'https://www.google.com/maps/search/{query}'
        ]
    
    def parse(self, response):
        self.logger.info(f"Scraping for {self.industry} in {self.location}")
        
        use_mock = os.environ.get('USE_MOCK_DATA') == 'true'
        # Use real scraper only when available and mock is not explicitly requested
        if REAL_SCRAPER_AVAILABLE and not use_mock:
            try:
                self.logger.info("Using real Google Maps scraper")
                scraper = GoogleMapsScraper(headless=True, job_id=self.job_id)
                results = scraper.scrape(
                    self.industry, 
                    self.location, 
                    self.limit,
                    self.min_rating,
                    self.min_reviews
                )
                self.logger.info(f"Real scraper found {len(results)} businesses")
                for result in results:
                    self.processed_count += 1
                    if self.job_id:
                        self.update_job_progress()
                    yield {}
            except Exception as e:
                self.logger.error(f"Real scraper failed: {e}")
                return
        elif use_mock:
            self.logger.warning("USE_MOCK_DATA enabled: generating mock leads")
            for i in range(min(self.limit, 20)):
                yield self.create_mock_lead(i)
        else:
            self.logger.error("Real scraper not available. Install selenium and chromedriver, or set USE_MOCK_DATA=true to use mock data.")
            return
    
    def create_mock_lead(self, index):
        mock_businesses = [
            {"name": "Pro Painters LLC", "phone": "(512) 555-0101", "rating": 4.8, "reviews": 127},
            {"name": "Austin Elite Painting", "phone": "(512) 555-0102", "rating": 4.5, "reviews": 89},
            {"name": "Color Masters", "phone": "(512) 555-0103", "rating": 4.2, "reviews": 45},
            {"name": "Premium Paint Co", "phone": "(512) 555-0104", "rating": 4.9, "reviews": 203},
            {"name": "Quick Brush Services", "phone": "(512) 555-0105", "rating": 3.8, "reviews": 12},
            {"name": "Landscape Pros", "phone": "(512) 555-0201", "rating": 4.6, "reviews": 156},
            {"name": "Green Thumb Gardens", "phone": "(512) 555-0202", "rating": 4.4, "reviews": 78},
            {"name": "Yard Masters", "phone": "(512) 555-0203", "rating": 4.7, "reviews": 92},
            {"name": "Elite Roofing", "phone": "(512) 555-0301", "rating": 4.5, "reviews": 234},
            {"name": "Top Tier Roofs", "phone": "(512) 555-0302", "rating": 4.3, "reviews": 67},
            {"name": "Expert Plumbing", "phone": "(512) 555-0401", "rating": 4.8, "reviews": 189},
            {"name": "Flow Masters", "phone": "(512) 555-0402", "rating": 4.1, "reviews": 34},
            {"name": "Spark Electric", "phone": "(512) 555-0501", "rating": 4.9, "reviews": 312},
            {"name": "Power Pro Electric", "phone": "(512) 555-0502", "rating": 4.6, "reviews": 145},
            {"name": "Bright Wire Services", "phone": "(512) 555-0503", "rating": 4.2, "reviews": 28},
            {"name": "Custom Contractors", "phone": "(512) 555-0601", "rating": 4.7, "reviews": 198},
            {"name": "Build Right Co", "phone": "(512) 555-0602", "rating": 4.4, "reviews": 76},
            {"name": "Home Improvements Plus", "phone": "(512) 555-0603", "rating": 4.5, "reviews": 109},
            {"name": "Quality Services", "phone": "(512) 555-0604", "rating": 4.3, "reviews": 52},
            {"name": "Professional Team", "phone": "(512) 555-0605", "rating": 4.8, "reviews": 167},
        ]
        
        business = mock_businesses[index % len(mock_businesses)]
        
        has_website = index % 3 != 0
        website_url = None
        platform_hint = None
        
        if has_website:
            if index % 5 == 0:
                website_url = f"{business['name'].lower().replace(' ', '')}.business.site"
                platform_hint = "business.site"
            elif index % 7 == 0:
                website_url = f"{business['name'].lower().replace(' ', '')}.godaddysites.com"
                platform_hint = "godaddysites"
            else:
                website_url = f"www.{business['name'].lower().replace(' ', '')}.com"
        
        last_review_date = datetime.utcnow() - timedelta(days=(index * 30))
        recent_cutoff = datetime.utcnow() - timedelta(days=self.recent_days)
        
        meets_rating = business['rating'] >= self.min_rating
        has_enough_reviews = business['reviews'] >= self.min_reviews
        has_recent = last_review_date >= recent_cutoff
        is_candidate = meets_rating and has_enough_reviews and has_recent
        
        self.processed_count += 1
        self.save_to_db({
            'business_name': business['name'],
            'phone': business['phone'],
            'website_url': website_url,
            'profile_url': f"https://maps.google.com/business/{business['name'].lower().replace(' ', '')}",
            'rating': business['rating'],
            'review_count': business['reviews'],
            'last_review_date': last_review_date,
            'platform_hint': platform_hint,
            'industry': self.industry,
            'location': self.location,
            'source': 'google_maps',
            'has_website': has_website,
            'meets_rating_threshold': meets_rating,
            'has_recent_reviews': has_recent,
            'is_candidate': is_candidate,
        })
        
        if self.job_id:
            self.update_job_progress()
        
        return {}
    
    def save_to_db(self, item):
        db = SessionLocal()
        try:
            existing = db.query(Lead).filter(
                Lead.business_name == item['business_name'],
                Lead.phone == item['phone']
            ).first()
            
            if existing:
                for key, value in item.items():
                    setattr(existing, key, value)
                existing.updated_at = datetime.utcnow()
            else:
                lead = Lead(**item)
                db.add(lead)
            
            db.commit()
        finally:
            db.close()
    
    def update_job_progress(self):
        if self.job_id:
            import sys
            sys.path.append('..')
            from main import update_job_status
            update_job_status(self.job_id, "running", self.processed_count, self.limit)
</file>

<file path="server/database.py">
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pathlib import Path

Path("db").mkdir(exist_ok=True)

SQLALCHEMY_DATABASE_URL = "sqlite:///./db/leadlawk.db"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, 
    connect_args={"check_same_thread": False}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def init_db():
    from models import Lead, CallLog
    Base.metadata.create_all(bind=engine)
</file>

<file path="server/Dockerfile">
FROM python:3.12-slim

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

WORKDIR /app

# System deps: chromium + chromedriver for Selenium
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        chromium chromium-driver \
        curl ca-certificates gcc && \
    rm -rf /var/lib/apt/lists/*

COPY requirements.txt /app/requirements.txt
RUN pip install --upgrade pip && pip install -r requirements.txt

COPY . /app

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
</file>

<file path="server/main.py">
from fastapi import FastAPI, HTTPException, BackgroundTasks, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import uuid
import threading
from datetime import datetime
import subprocess
import sys
import json
import os
from pathlib import Path
import shutil
import asyncio
from collections import defaultdict
import logging
from logging.handlers import RotatingFileHandler

from database import SessionLocal, init_db
from models import Lead, LeadStatus
from schemas import LeadResponse, LeadUpdate, ScrapeRequest, JobResponse

app = FastAPI(title="LeadLawk API")

# Configure logging to a rotating file
LOG_PATH = Path(__file__).resolve().parent / "server.log"
LOG_PATH.parent.mkdir(parents=True, exist_ok=True)

logger = logging.getLogger("leadlawk")
logger.setLevel(logging.INFO)
_handler = RotatingFileHandler(LOG_PATH, maxBytes=1_000_000, backupCount=3)
_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
_handler.setFormatter(_formatter)
if not any(isinstance(h, RotatingFileHandler) for h in logger.handlers):
    logger.addHandler(_handler)

# Also forward uvicorn logs to the same file
for _name in ("uvicorn", "uvicorn.error", "uvicorn.access"):
    _uv = logging.getLogger(_name)
    if not any(isinstance(h, RotatingFileHandler) for h in _uv.handlers):
        _uv.addHandler(_handler)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

jobs: Dict[str, Dict[str, Any]] = {}
job_lock = threading.Lock()
job_logs: Dict[str, List[str]] = defaultdict(list)
active_connections: Dict[str, List[WebSocket]] = defaultdict(list)
logs_connections: List[WebSocket] = []
event_loop: asyncio.AbstractEventLoop | None = None


def update_job_status(job_id: str, status: str, processed: int = 0, total: int = 0, message: Optional[str] = None):
    with job_lock:
        if job_id in jobs:
            jobs[job_id].update({
                "status": status,
                "processed": processed,
                "total": total,
                "message": message,
                "updated_at": datetime.utcnow().isoformat()
            })
            
def add_job_log(job_id: str, log_message: str):
    timestamp = datetime.utcnow().isoformat()
    formatted_log = f"[{timestamp}] {log_message}"
    job_logs[job_id].append(formatted_log)
    # Persist to server log as well
    try:
      logger.info(f"JOB {job_id}: {log_message}")
    except Exception:
      pass
    # Send to connected WebSocket clients
    try:
        # If we're on the event loop thread
        asyncio.get_running_loop()
        asyncio.create_task(broadcast_log(job_id, formatted_log))
    except RuntimeError:
        # Called from a background thread: submit to main loop
        if event_loop is not None:
            asyncio.run_coroutine_threadsafe(broadcast_log(job_id, formatted_log), event_loop)
    
async def broadcast_log(job_id: str, log_message: str):
    for websocket in active_connections.get(job_id, []):
        try:
            await websocket.send_json({
                "type": "log",
                "message": log_message
            })
        except Exception:
            pass


def run_scraper(job_id: str, params: ScrapeRequest):
    try:
        update_job_status(job_id, "running", 0, params.limit)
        add_job_log(job_id, f"Starting scrape for {params.industry} in {params.location}")
        add_job_log(job_id, f"Search parameters: {params.limit} leads, min rating {params.min_rating}, min reviews {params.min_reviews}")
        add_job_log(job_id, f"Python: {sys.executable}")
        add_job_log(job_id, f"USE_MOCK_DATA={os.environ.get('USE_MOCK_DATA')}")

        # If real scraper prerequisites are missing, automatically enable mock mode
        enable_mock = False
        try:
            import selenium  # noqa: F401
            has_selenium = True
        except Exception:
            has_selenium = False
        chromedriver = shutil.which("chromedriver")
        if not has_selenium or not chromedriver:
            # Respect explicit env override if user already set USE_MOCK_DATA
            if (os.environ.get("USE_MOCK_DATA") or "").lower() not in ("true", "1", "yes"):
                enable_mock = True
                add_job_log(job_id, "Selenium/driver not available. Enabling USE_MOCK_DATA=true for this run.")
        
        cmd = [
            sys.executable,
            "-m", "scrapy", "runspider",
            "scraper/gmaps_spider.py",
            "-a", f"industry={params.industry}",
            "-a", f"location={params.location}",
            "-a", f"limit={params.limit}",
            "-a", f"min_rating={params.min_rating}",
            "-a", f"min_reviews={params.min_reviews}",
            "-a", f"recent_days={params.recent_days}",
            "-a", f"job_id={job_id}",
            "-L", "INFO"
        ]
        
        add_job_log(job_id, f"Launching Scrapy spider... CWD={Path.cwd()} CMD={' '.join(cmd)}")
        
        # Prepare environment for child process (optionally enabling mock data)
        child_env = os.environ.copy()
        if enable_mock:
            child_env["USE_MOCK_DATA"] = "true"
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            env=child_env
        )
        
        # Stream output line by line
        for line in iter(process.stdout.readline, ''):
            if line:
                add_job_log(job_id, line.strip())
        
        process.wait()
        
        # Determine outcome based on process return code and progress tracked during run
        processed = 0
        with job_lock:
            if job_id in jobs:
                processed = int(jobs[job_id].get("processed", 0) or 0)
        if process.returncode == 0 and processed > 0:
            add_job_log(job_id, f"Scrape completed successfully! Processed {processed} leads.")
            update_job_status(job_id, "done", processed, params.limit)
        else:
            # Craft a concise, actionable error message with context
            with job_lock:
                tail = job_logs.get(job_id, [])[-5:]
            tail_preview = " | ".join(tail)[:400] if tail else "(no output captured)"
            msg = (
                f"Scraper exited with code {process.returncode}. "
                f"Processed {processed} of {params.limit}. "
                f"Last output: {tail_preview}"
            )
            add_job_log(job_id, "Scrape failed or produced no results")
            update_job_status(job_id, "error", processed, params.limit, msg)
            
    except Exception as e:
        add_job_log(job_id, f"Error: {str(e)}")
        update_job_status(job_id, "error", 0, params.limit, str(e))


@app.on_event("startup")
async def startup_event():
    global event_loop
    event_loop = asyncio.get_running_loop()
    init_db()


@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "LeadLawk API",
        "timestamp": datetime.utcnow().isoformat()
    }


@app.get("/diagnostics")
async def diagnostics():
    """Run environment diagnostics for scraping and API health."""
    ok, messages = _scrape_prerequisites()
    # DB check
    db_ok = True
    leads_count = None
    try:
        db = SessionLocal()
        leads_count = db.query(Lead).count()
        db.close()
    except Exception as e:
        db_ok = False
        messages.append(f"DB error: {e}")
    # Log path check
    log_ok = True
    try:
        LOG_PATH.touch(exist_ok=True)
    except Exception as e:
        log_ok = False
        messages.append(f"Log path error: {e}")

    return {
        "scraper_ready": ok,
        "db_ok": db_ok,
        "log_ok": log_ok,
        "python": sys.executable,
        "cwd": str(Path.cwd()),
        "use_mock_data": os.environ.get("USE_MOCK_DATA"),
        "leads_count": leads_count,
        "messages": messages,
    }


@app.post("/jobs/scrape", response_model=Dict[str, str])
async def start_scrape(request: ScrapeRequest, background_tasks: BackgroundTasks):
    job_id = str(uuid.uuid4())
    
    with job_lock:
        jobs[job_id] = {
            "job_id": job_id,
            "status": "running",
            "processed": 0,
            "total": request.limit,
            "message": None,
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat()
        }
    
    # Preflight checks to provide actionable errors before launching
    ok, messages = _scrape_prerequisites()
    for m in messages:
        add_job_log(job_id, m)
    if not ok:
        update_job_status(job_id, "error", 0, request.limit, "; ".join(messages))
    else:
        thread = threading.Thread(target=run_scraper, args=(job_id, request))
        thread.start()
    
    return {"job_id": job_id}


@app.get("/jobs")
async def list_jobs():
    """Return all current jobs (in-memory) sorted by updated_at desc."""
    with job_lock:
        all_jobs = list(jobs.values())
    def _ts(j):
        return j.get("updated_at") or j.get("created_at") or ""
    all_jobs.sort(key=_ts, reverse=True)
    return all_jobs


def _scrape_prerequisites() -> tuple[bool, list[str]]:
    msgs: list[str] = []
    ok = True
    # Scrapy availability
    try:
        import scrapy  # noqa: F401
        msgs.append("Scrapy: OK")
    except Exception as e:
        ok = False
        msgs.append(f"Scrapy import failed: {e}")
    # Selenium availability (for real scraper)
    try:
        import selenium  # noqa: F401
        msgs.append("Selenium: OK")
    except Exception as e:
        msgs.append(f"Selenium import failed (real scraper disabled): {e}")
    # ChromeDriver on PATH
    chromedriver = shutil.which("chromedriver")
    if chromedriver:
        msgs.append(f"chromedriver: {chromedriver}")
    else:
        msgs.append("chromedriver not found on PATH (required for real scraper)")
    return ok, msgs


@app.get("/jobs/{job_id}", response_model=JobResponse)
async def get_job_status(job_id: str):
    with job_lock:
        if job_id not in jobs:
            raise HTTPException(status_code=404, detail="Job not found")
        return JobResponse(**jobs[job_id])


@app.get("/jobs/{job_id}/logs")
async def get_job_logs(job_id: str, tail: int = 500):
    """Return the last N lines for a given job's in-memory logs.

    Note: For live updates, prefer the existing WebSocket at /ws/jobs/{job_id}.
    """
    with job_lock:
        lines = list(job_logs.get(job_id, []))
    tail = max(1, min(tail, 5000))
    return {"job_id": job_id, "lines": lines[-tail:]}

@app.get("/leads", response_model=list[LeadResponse])
async def get_leads(
    status: Optional[str] = None,
    search: Optional[str] = None,
    candidates_only: Optional[bool] = None
):
    db = SessionLocal()
    try:
        query = db.query(Lead)
        
        if status:
            query = query.filter(Lead.status == status)
        
        if search:
            search_pattern = f"%{search}%"
            query = query.filter(
                (Lead.business_name.ilike(search_pattern)) |
                (Lead.phone.ilike(search_pattern))
            )
        
        if candidates_only:
            query = query.filter(Lead.is_candidate == True)
        
        leads = query.all()
        return [LeadResponse.from_orm(lead) for lead in leads]
    finally:
        db.close()


@app.delete("/admin/leads")
async def delete_all_leads():
    """Dangerous: Deletes all leads. Use to clear mock/dev data."""
    db = SessionLocal()
    try:
        count = db.query(Lead).count()
        db.query(Lead).delete()
        db.commit()
        return {"deleted": count}
    finally:
        db.close()


@app.get("/logs")
async def get_logs(tail: int = 500):
    """Return the last N lines from the server log file."""
    try:
        tail = max(1, min(tail, 5000))
        if not LOG_PATH.exists():
            return {"lines": []}
        with LOG_PATH.open("r", encoding="utf-8", errors="ignore") as f:
            lines = f.readlines()
        return {"lines": [ln.rstrip("\n") for ln in lines[-tail:]]}
    except Exception as e:
        return {"lines": [f"Error reading logs: {e}"]}

@app.websocket("/ws/jobs/{job_id}")
async def websocket_endpoint(websocket: WebSocket, job_id: str):
    await websocket.accept()
    active_connections[job_id].append(websocket)
    
    # Send existing logs
    for log in job_logs.get(job_id, []):
        await websocket.send_json({
            "type": "log",
            "message": log
        })
    
    try:
        # Send job status updates
        while True:
            await asyncio.sleep(1)
            with job_lock:
                if job_id in jobs:
                    await websocket.send_json({
                        "type": "status",
                        "data": jobs[job_id]
                    })
                    if jobs[job_id]["status"] in ["done", "error"]:
                        break
    except WebSocketDisconnect:
        active_connections[job_id].remove(websocket)
    except Exception as e:
        print(f"WebSocket error: {e}")
        if websocket in active_connections[job_id]:
            active_connections[job_id].remove(websocket)


@app.websocket("/ws/logs")
async def websocket_logs(websocket: WebSocket):
    await websocket.accept()
    logs_connections.append(websocket)
    try:
        # On connect, send the last 200 lines
        if LOG_PATH.exists():
            with LOG_PATH.open("r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()[-200:]
                for ln in lines:
                    await websocket.send_json({"type": "log", "message": ln.rstrip("\n")})

        # Tail the file for new lines
        last_size = LOG_PATH.stat().st_size if LOG_PATH.exists() else 0
        while True:
            await asyncio.sleep(1)
            if not LOG_PATH.exists():
                continue
            size = LOG_PATH.stat().st_size
            if size > last_size:
                with LOG_PATH.open("r", encoding="utf-8", errors="ignore") as f:
                    f.seek(last_size)
                    chunk = f.read(size - last_size)
                last_size = size
                for ln in chunk.splitlines():
                    await websocket.send_json({"type": "log", "message": ln})
    except WebSocketDisconnect:
        if websocket in logs_connections:
            logs_connections.remove(websocket)
    except Exception as e:
        try:
            await websocket.send_json({"type": "error", "message": str(e)})
        except Exception:
            pass
        if websocket in logs_connections:
            logs_connections.remove(websocket)

@app.get("/leads/{lead_id}", response_model=LeadResponse)
async def get_lead(lead_id: str):
    db = SessionLocal()
    try:
        lead = db.query(Lead).filter(Lead.id == lead_id).first()
        if not lead:
            raise HTTPException(status_code=404, detail="Lead not found")
        return LeadResponse.from_orm(lead)
    finally:
        db.close()


@app.put("/leads/{lead_id}", response_model=LeadResponse)
async def update_lead(lead_id: str, update: LeadUpdate):
    db = SessionLocal()
    try:
        lead = db.query(Lead).filter(Lead.id == lead_id).first()
        if not lead:
            raise HTTPException(status_code=404, detail="Lead not found")
        
        update_data = update.dict(exclude_unset=True)
        for key, value in update_data.items():
            setattr(lead, key, value)
        
        lead.updated_at = datetime.utcnow()
        db.commit()
        db.refresh(lead)
        
        return LeadResponse.from_orm(lead)
    finally:
        db.close()


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
</file>

<file path="server/models.py">
from sqlalchemy import Column, String, Float, Integer, Boolean, DateTime, Text, ForeignKey, Enum as SQLEnum
from sqlalchemy.orm import relationship
from datetime import datetime
import enum
import uuid

from database import Base


class LeadStatus(str, enum.Enum):
    NEW = "new"
    CALLED = "called"
    INTERESTED = "interested"
    CONVERTED = "converted"
    DNC = "dnc"


class Lead(Base):
    __tablename__ = "leads"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    business_name = Column(String, nullable=False, index=True)
    phone = Column(String, nullable=False, index=True)
    website_url = Column(String, nullable=True)
    profile_url = Column(String, nullable=True)
    rating = Column(Float, nullable=True)
    review_count = Column(Integer, nullable=True)
    last_review_date = Column(DateTime, nullable=True)
    platform_hint = Column(String, nullable=True)
    industry = Column(String, nullable=False)
    location = Column(String, nullable=False)
    source = Column(String, nullable=False, default="google_maps")
    has_website = Column(Boolean, default=False)
    meets_rating_threshold = Column(Boolean, default=False)
    has_recent_reviews = Column(Boolean, default=False)
    is_candidate = Column(Boolean, default=False)
    status = Column(SQLEnum(LeadStatus), default=LeadStatus.NEW)
    notes = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    call_logs = relationship("CallLog", back_populates="lead", cascade="all, delete-orphan")


class CallLog(Base):
    __tablename__ = "call_logs"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    lead_id = Column(String, ForeignKey("leads.id"), nullable=False)
    called_at = Column(DateTime, default=datetime.utcnow)
    outcome = Column(String, nullable=True)
    notes = Column(Text, nullable=True)
    duration_seconds = Column(Integer, nullable=True)
    
    lead = relationship("Lead", back_populates="call_logs")
</file>

<file path="server/requirements.txt">
fastapi==0.109.0
uvicorn[standard]==0.27.0
sqlalchemy==2.0.25
scrapy==2.11.0
pydantic==2.5.3
python-multipart==0.0.6
httpx==0.26.0
websockets==12.0

# Real scraper dependencies
selenium==4.22.0
webdriver-manager==4.0.1

# Optional: For real Google Maps scraping (uncomment if needed)
# selenium==4.16.0
# webdriver-manager==4.0.1
</file>

<file path="server/schemas.py">
from pydantic import BaseModel
from typing import Optional
from datetime import datetime


class ScrapeRequest(BaseModel):
    industry: str
    location: str
    limit: int = 50
    min_rating: float = 4.0
    min_reviews: int = 3
    recent_days: int = 365


class JobResponse(BaseModel):
    status: str
    processed: int
    total: int
    message: Optional[str] = None


class LeadUpdate(BaseModel):
    status: Optional[str] = None
    notes: Optional[str] = None


class LeadResponse(BaseModel):
    id: str
    business_name: str
    phone: str
    website_url: Optional[str]
    profile_url: Optional[str]
    rating: Optional[float]
    review_count: Optional[int]
    last_review_date: Optional[datetime]
    platform_hint: Optional[str]
    industry: str
    location: str
    source: str
    has_website: bool
    meets_rating_threshold: bool
    has_recent_reviews: bool
    is_candidate: bool
    status: str
    notes: Optional[str]
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True
</file>

<file path="server/test_server.py">
import pytest
from fastapi.testclient import TestClient
from main import app
from database import SessionLocal, init_db
from models import Lead, LeadStatus
import json

client = TestClient(app)


def setup_module(module):
    init_db()


def test_scrape_job_with_thresholds():
    response = client.post("/jobs/scrape", json={
        "industry": "painter",
        "location": "Austin, TX",
        "limit": 5,
        "min_rating": 4.5,
        "min_reviews": 5,
        "recent_days": 180
    })
    
    assert response.status_code == 200
    data = response.json()
    assert "job_id" in data
    
    job_id = data["job_id"]
    
    import time
    time.sleep(2)
    
    job_response = client.get(f"/jobs/{job_id}")
    assert job_response.status_code == 200
    job_data = job_response.json()
    assert job_data["status"] in ["running", "done"]


def test_get_leads_filtering():
    db = SessionLocal()
    
    lead1 = Lead(
        business_name="Test Painter 1",
        phone="555-0001",
        industry="painter",
        location="Austin, TX",
        is_candidate=True,
        status=LeadStatus.NEW
    )
    lead2 = Lead(
        business_name="Test Painter 2",
        phone="555-0002",
        industry="painter",
        location="Austin, TX",
        is_candidate=False,
        status=LeadStatus.CALLED
    )
    
    db.add(lead1)
    db.add(lead2)
    db.commit()
    db.close()
    
    response = client.get("/leads?candidates_only=true")
    assert response.status_code == 200
    leads = response.json()
    assert all(lead["is_candidate"] for lead in leads)
    
    response = client.get("/leads?status=called")
    assert response.status_code == 200
    leads = response.json()
    assert all(lead["status"] == "called" for lead in leads)


def test_update_lead():
    db = SessionLocal()
    lead = Lead(
        business_name="Test Business",
        phone="555-1234",
        industry="painter",
        location="Austin, TX",
        status=LeadStatus.NEW
    )
    db.add(lead)
    db.commit()
    lead_id = lead.id
    db.close()
    
    response = client.put(f"/leads/{lead_id}", json={
        "status": "called",
        "notes": "Left voicemail"
    })
    
    assert response.status_code == 200
    updated_lead = response.json()
    assert updated_lead["status"] == "called"
    assert updated_lead["notes"] == "Left voicemail"


def test_threshold_calculation():
    from scraper.gmaps_spider import GMapsSpider
    from datetime import datetime, timedelta
    
    spider = GMapsSpider(
        min_rating=4.5,
        min_reviews=10,
        recent_days=180
    )
    
    recent_date = datetime.utcnow() - timedelta(days=90)
    old_date = datetime.utcnow() - timedelta(days=365)
    
    lead_data = {
        'rating': 4.6,
        'review_count': 15,
        'last_review_date': recent_date
    }
    
    meets_rating = lead_data['rating'] >= spider.min_rating
    has_enough_reviews = lead_data['review_count'] >= spider.min_reviews
    recent_cutoff = datetime.utcnow() - timedelta(days=spider.recent_days)
    has_recent = lead_data['last_review_date'] >= recent_cutoff
    
    assert meets_rating == True
    assert has_enough_reviews == True
    assert has_recent == True
    
    is_candidate = meets_rating and has_enough_reviews and has_recent
    assert is_candidate == True
    
    lead_data['rating'] = 4.0
    meets_rating = lead_data['rating'] >= spider.min_rating
    is_candidate = meets_rating and has_enough_reviews and has_recent
    assert is_candidate == False


if __name__ == "__main__":
    pytest.main([__file__])
</file>

<file path="test/widget_test.dart">
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:LeadLoq/features/leads/presentation/pages/run_scrape_page.dart';
import 'package:LeadLoq/features/leads/presentation/providers/scrape_form_provider.dart';

void main() {
  group('RunScrapePage Widget Tests', () {
    setUp(() {
      SharedPreferences.setMockInitialValues({});
    });

    testWidgets('Form displays all required fields', (WidgetTester tester) async {
      final prefs = await SharedPreferences.getInstance();
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [
            scrapeFormProvider.overrideWith(
              (ref) => ScrapeFormNotifier(prefs),
            ),
          ],
          child: const MaterialApp(
            home: RunScrapePage(),
          ),
        ),
      );

      expect(find.text('Industry'), findsOneWidget);
      expect(find.text('Location'), findsOneWidget);
      expect(find.text('Result Limit'), findsOneWidget);
      expect(find.text('Advanced Settings'), findsOneWidget);
      expect(find.text('Run Scrape'), findsOneWidget);
    });

    testWidgets('Industry chips are selectable', (WidgetTester tester) async {
      final prefs = await SharedPreferences.getInstance();
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [
            scrapeFormProvider.overrideWith(
              (ref) => ScrapeFormNotifier(prefs),
            ),
          ],
          child: const MaterialApp(
            home: RunScrapePage(),
          ),
        ),
      );

      await tester.tap(find.text('Painter'));
      await tester.pump();
      
      final painterChip = tester.widget<ChoiceChip>(
        find.widgetWithText(ChoiceChip, 'Painter'),
      );
      expect(painterChip.selected, isTrue);
    });

    testWidgets('Custom industry field appears when Custom is selected', 
        (WidgetTester tester) async {
      final prefs = await SharedPreferences.getInstance();
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [
            scrapeFormProvider.overrideWith(
              (ref) => ScrapeFormNotifier(prefs),
            ),
          ],
          child: const MaterialApp(
            home: RunScrapePage(),
          ),
        ),
      );

      expect(find.text('Custom Industry'), findsNothing);
      
      await tester.tap(find.text('Custom...'));
      await tester.pump();
      
      expect(find.text('Custom Industry'), findsOneWidget);
    });

    testWidgets('Advanced settings can be expanded', (WidgetTester tester) async {
      final prefs = await SharedPreferences.getInstance();
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [
            scrapeFormProvider.overrideWith(
              (ref) => ScrapeFormNotifier(prefs),
            ),
          ],
          child: const MaterialApp(
            home: RunScrapePage(),
          ),
        ),
      );

      await tester.tap(find.text('Advanced Settings'));
      await tester.pumpAndSettle();
      
      expect(find.textContaining('Min Rating'), findsOneWidget);
      expect(find.textContaining('Min Reviews'), findsOneWidget);
      expect(find.textContaining('Recent Days'), findsOneWidget);
    });

    testWidgets('Form validation works', (WidgetTester tester) async {
      final prefs = await SharedPreferences.getInstance();
      
      await tester.pumpWidget(
        ProviderScope(
          overrides: [
            scrapeFormProvider.overrideWith(
              (ref) => ScrapeFormNotifier(prefs),
            ),
          ],
          child: const MaterialApp(
            home: RunScrapePage(),
          ),
        ),
      );

      await tester.tap(find.text('Run Scrape'));
      await tester.pump();
      
      expect(find.text('Please enter a location'), findsOneWidget);
    });
  });
}
</file>

<file path=".gitignore">
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release

# Additional ignores added by tooling

# Build outputs anywhere
**/build/

# iOS/macOS (Xcode) and CocoaPods
ios/Pods/
macos/Pods/
**/xcuserdata/
**/*.xcuserstate
ios/Flutter/Generated.xcconfig
ios/Flutter/flutter_export_environment.sh
ios/.symlinks
macos/Flutter/ephemeral/
**/Flutter/ephemeral/

# Python (server)
venv/
.venv/
**/venv/
**/.venv/
__pycache__/
**/__pycache__/
*.py[cod]
*.pyo
.pytest_cache/
.mypy_cache/
.ruff_cache/
.coverage
coverage.xml
htmlcov/

# Logs and runtime files
*.log
logs/
*.pid
server/db/*.db

# macOS
.DS_Store
</file>

<file path=".metadata">
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "edada7c56edf4a183c1735310e123c7f923584f1"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1
    - platform: macos
      create_revision: edada7c56edf4a183c1735310e123c7f923584f1
      base_revision: edada7c56edf4a183c1735310e123c7f923584f1

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'
</file>

<file path="analysis_options.yaml">
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
</file>

<file path="docker-compose.yml">
version: '3.9'
services:
  api:
    build: ./server
    working_dir: /app
    volumes:
      - ./server:/app
    ports:
      - "8000:8000"
    environment:
      - USE_MOCK_DATA=false
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
</file>

<file path="generate_icons.sh">
#!/bin/bash

# Generate app icons for iOS and macOS from the LeadLawk logo
SOURCE_IMAGE="assets/images/leadlawk-logo.png"

# iOS Icon sizes
echo "Generating iOS icons..."

# iOS App Icon sizes
sips -z 40 40 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png
sips -z 60 60 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png
sips -z 29 29 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png
sips -z 58 58 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png
sips -z 87 87 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png
sips -z 40 40 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png
sips -z 80 80 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png
sips -z 120 120 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png
sips -z 120 120 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png
sips -z 180 180 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png
sips -z 76 76 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png
sips -z 152 152 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png
sips -z 167 167 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png
sips -z 1024 1024 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png
sips -z 20 20 "$SOURCE_IMAGE" --out ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png

# macOS Icon sizes
echo "Generating macOS icons..."

# Create macOS icon directory if it doesn't exist
mkdir -p macos/Runner/Assets.xcassets/AppIcon.appiconset

# macOS App Icon sizes
sips -z 16 16 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_16.png
sips -z 32 32 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_32.png
sips -z 64 64 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_64.png
sips -z 128 128 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_128.png
sips -z 256 256 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_256.png
sips -z 512 512 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_512.png
sips -z 1024 1024 "$SOURCE_IMAGE" --out macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_1024.png

# Android icons
echo "Generating Android icons..."
sips -z 48 48 "$SOURCE_IMAGE" --out android/app/src/main/res/mipmap-mdpi/ic_launcher.png
sips -z 72 72 "$SOURCE_IMAGE" --out android/app/src/main/res/mipmap-hdpi/ic_launcher.png
sips -z 96 96 "$SOURCE_IMAGE" --out android/app/src/main/res/mipmap-xhdpi/ic_launcher.png
sips -z 144 144 "$SOURCE_IMAGE" --out android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
sips -z 192 192 "$SOURCE_IMAGE" --out android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png

echo "App icons generated successfully!"
</file>

<file path="pubspec.lock">
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  _fe_analyzer_shared:
    dependency: transitive
    description:
      name: _fe_analyzer_shared
      sha256: da0d9209ca76bde579f2da330aeb9df62b6319c834fa7baae052021b0462401f
      url: "https://pub.dev"
    source: hosted
    version: "85.0.0"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: "974859dc0ff5f37bc4313244b3218c791810d03ab3470a579580279ba971a48d"
      url: "https://pub.dev"
    source: hosted
    version: "7.7.1"
  args:
    dependency: transitive
    description:
      name: args
      sha256: d0481093c50b1da8910eb0bb301626d4d8eb7284aa739614d2b394ee09e3ea04
      url: "https://pub.dev"
    source: hosted
    version: "2.7.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "758e6d74e971c3e5aceb4110bfd6698efc7f501675bcfe0c775459a8140750eb"
      url: "https://pub.dev"
    source: hosted
    version: "2.13.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "8aab1771e1243a5063b8b0ff68042d67334e3feab9e95b9490f9a6ebf73b42ea"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  build:
    dependency: transitive
    description:
      name: build
      sha256: "51dc711996cbf609b90cbe5b335bbce83143875a9d58e4b5c6d3c4f684d3dda7"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.4"
  build_config:
    dependency: transitive
    description:
      name: build_config
      sha256: "4ae2de3e1e67ea270081eaee972e1bd8f027d459f249e0f1186730784c2e7e33"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  build_daemon:
    dependency: transitive
    description:
      name: build_daemon
      sha256: "8e928697a82be082206edb0b9c99c5a4ad6bc31c9e9b8b2f291ae65cd4a25daa"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.4"
  build_resolvers:
    dependency: transitive
    description:
      name: build_resolvers
      sha256: ee4257b3f20c0c90e72ed2b57ad637f694ccba48839a821e87db762548c22a62
      url: "https://pub.dev"
    source: hosted
    version: "2.5.4"
  build_runner:
    dependency: "direct dev"
    description:
      name: build_runner
      sha256: "382a4d649addbfb7ba71a3631df0ec6a45d5ab9b098638144faf27f02778eb53"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.4"
  build_runner_core:
    dependency: transitive
    description:
      name: build_runner_core
      sha256: "85fbbb1036d576d966332a3f5ce83f2ce66a40bea1a94ad2d5fc29a19a0d3792"
      url: "https://pub.dev"
    source: hosted
    version: "9.1.2"
  built_collection:
    dependency: transitive
    description:
      name: built_collection
      sha256: "376e3dd27b51ea877c28d525560790aee2e6fbb5f20e2f85d5081027d94e2100"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  built_value:
    dependency: transitive
    description:
      name: built_value
      sha256: ba95c961bafcd8686d1cf63be864eb59447e795e124d98d6a27d91fcd13602fb
      url: "https://pub.dev"
    source: hosted
    version: "8.11.1"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: f71061c654a3380576a52b451dd5532377954cf9dbd272a78fc8479606670803
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  checked_yaml:
    dependency: transitive
    description:
      name: checked_yaml
      sha256: "959525d3162f249993882720d52b7e0c833978df229be20702b33d48d91de70f"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.4"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: fddb70d9b5277016c77a80201021d40a2247104d9f4aa7bab7157b7e3f05b84b
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  code_builder:
    dependency: transitive
    description:
      name: code_builder
      sha256: "0ec10bf4a89e4c613960bf1e8b42c64127021740fb21640c29c909826a5eea3e"
      url: "https://pub.dev"
    source: hosted
    version: "4.10.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: "2f5709ae4d3d59dd8f7cd309b4e023046b57d8a6c82130785d2b0e5868084e76"
      url: "https://pub.dev"
    source: hosted
    version: "1.19.1"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: b30acd5944035672bc15c6b7a8b47d773e41e2f17de064350988c5d02adb1c68
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  dart_style:
    dependency: transitive
    description:
      name: dart_style
      sha256: "8a0e5fba27e8ee025d2ffb4ee820b4e6e2cf5e4246a6b1a477eb66866947e0bb"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.1"
  dartz:
    dependency: "direct main"
    description:
      name: dartz
      sha256: e6acf34ad2e31b1eb00948692468c30ab48ac8250e0f0df661e29f12dd252168
      url: "https://pub.dev"
    source: hosted
    version: "0.10.1"
  dio:
    dependency: "direct main"
    description:
      name: dio
      sha256: d90ee57923d1828ac14e492ca49440f65477f4bb1263575900be731a3dac66a9
      url: "https://pub.dev"
    source: hosted
    version: "5.9.0"
  dio_web_adapter:
    dependency: transitive
    description:
      name: dio_web_adapter
      sha256: "7586e476d70caecaf1686d21eee7247ea43ef5c345eab9e0cc3583ff13378d78"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  equatable:
    dependency: "direct main"
    description:
      name: equatable
      sha256: "567c64b3cb4cf82397aac55f4f0cbd3ca20d77c6c03bedbc4ceaddc08904aef7"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.7"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "5368f224a74523e8d2e7399ea1638b37aecfca824a3cc4dfdf77bf1fa905ac44"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.3"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "289279317b4b16eb2bb7e271abccd4bf84ec9bdcbe999e278a94b804f5630418"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_dotenv:
    dependency: "direct main"
    description:
      name: flutter_dotenv
      sha256: d4130c4a43e0b13fefc593bc3961f2cb46e30cb79e253d4a526b1b5d24ae1ce4
      url: "https://pub.dev"
    source: hosted
    version: "6.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "9e8c3858111da373efc5aa341de011d9bd23e2c5c5e0c62bccf32438e192d7b1"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  flutter_riverpod:
    dependency: "direct main"
    description:
      name: flutter_riverpod
      sha256: "9532ee6db4a943a1ed8383072a2e3eeda041db5657cdf6d2acecf3c21ecbe7e1"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  freezed:
    dependency: "direct dev"
    description:
      name: freezed
      sha256: "59a584c24b3acdc5250bb856d0d3e9c0b798ed14a4af1ddb7dc1c7b41df91c9c"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.8"
  freezed_annotation:
    dependency: "direct main"
    description:
      name: freezed_annotation
      sha256: c2e2d632dd9b8a2b7751117abcfc2b4888ecfe181bd9fca7170d9ef02e595fe2
      url: "https://pub.dev"
    source: hosted
    version: "2.4.4"
  frontend_server_client:
    dependency: transitive
    description:
      name: frontend_server_client
      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: c3f1ee72c96f8f78935e18aa8cecced9ab132419e8625dc187e1c2408efc20de
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  go_router:
    dependency: "direct main"
    description:
      name: go_router
      sha256: b465e99ce64ba75e61c8c0ce3d87b66d8ac07f0b35d0a7e0263fcfc10f99e836
      url: "https://pub.dev"
    source: hosted
    version: "13.2.5"
  graphs:
    dependency: transitive
    description:
      name: graphs
      sha256: "741bbf84165310a68ff28fe9e727332eef1407342fca52759cb21ad8177bb8d0"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  http:
    dependency: transitive
    description:
      name: http
      sha256: bb2ce4590bc2667c96f318d68cac1b5a7987ec819351d32b1c987239a815e007
      url: "https://pub.dev"
    source: hosted
    version: "1.5.0"
  http_multi_server:
    dependency: transitive
    description:
      name: http_multi_server
      sha256: aa6199f908078bb1c5efb8d8638d4ae191aac11b311132c3ef48ce352fb52ef8
      url: "https://pub.dev"
    source: hosted
    version: "3.2.2"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "178d74305e7866013777bab2c3d8726205dc5a4dd935297175b19a23a2e66571"
      url: "https://pub.dev"
    source: hosted
    version: "4.1.2"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: "3bc132a9dbce73a7e4a21a17d06e1878839ffbf975568bc875c60537824b0c4d"
      url: "https://pub.dev"
    source: hosted
    version: "0.18.1"
  io:
    dependency: transitive
    description:
      name: io
      sha256: dfd5a80599cf0165756e3181807ed3e77daf6dd4137caaad72d0b7931597650b
      url: "https://pub.dev"
    source: hosted
    version: "1.0.5"
  js:
    dependency: transitive
    description:
      name: js
      sha256: "53385261521cc4a0c4658fd0ad07a7d14591cf8fc33abbceae306ddb974888dc"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.2"
  json_annotation:
    dependency: "direct main"
    description:
      name: json_annotation
      sha256: "1ce844379ca14835a50d2f019a3099f419082cfdd231cd86a142af94dd5c6bb1"
      url: "https://pub.dev"
    source: hosted
    version: "4.9.0"
  json_serializable:
    dependency: "direct dev"
    description:
      name: json_serializable
      sha256: c50ef5fc083d5b5e12eef489503ba3bf5ccc899e487d691584699b4bdefeea8c
      url: "https://pub.dev"
    source: hosted
    version: "6.9.5"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "6bb818ecbdffe216e81182c2f0714a2e62b593f4a4f13098713ff1685dfb6ab0"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.9"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: f8b613e7e6a13ec79cfdc0e97638fddb3ab848452eff057653abd3edba760573
      url: "https://pub.dev"
    source: hosted
    version: "3.0.9"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: dc58c723c3c24bf8d3e2d3ad3f2f9d7bd9cf43ec6feaa64181775e60190153f2
      url: "https://pub.dev"
    source: hosted
    version: "0.12.17"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: e3641ec5d63ebf0d9b41bd43201a66e3fc79a65db5f61fc181f04cd27aab950c
      url: "https://pub.dev"
    source: hosted
    version: "1.16.0"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: "41a20518f0cb1256669420fdba0cd90d21561e560ac240f26ef8322e45bb7ed6"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  mockito:
    dependency: "direct dev"
    description:
      name: mockito
      sha256: "4546eac99e8967ea91bae633d2ca7698181d008e95fa4627330cf903d573277a"
      url: "https://pub.dev"
    source: hosted
    version: "5.4.6"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: f096c55ebb7deb7e384101542bfba8c52696c1b56fca2eb62827989ef2353bbc
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "75cca69d1490965be98c73ceaea117e8a04dd21217b37b292c9ddbec0d955bc5"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pool:
    dependency: transitive
    description:
      name: pool
      sha256: "20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.1"
  pub_semver:
    dependency: transitive
    description:
      name: pub_semver
      sha256: "5bfcf68ca79ef689f8990d1160781b4bad40a3bd5e5218ad4076ddb7f4081585"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.0"
  pubspec_parse:
    dependency: transitive
    description:
      name: pubspec_parse
      sha256: "0560ba233314abbed0a48a2956f7f022cce7c3e1e73df540277da7544cad4082"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.0"
  riverpod:
    dependency: transitive
    description:
      name: riverpod
      sha256: "59062512288d3056b2321804332a13ffdd1bf16df70dcc8e506e411280a72959"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  shared_preferences:
    dependency: "direct main"
    description:
      name: shared_preferences
      sha256: "6e8bf70b7fef813df4e9a36f658ac46d107db4b4cfe1048b477d4e453a8159f5"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  shared_preferences_android:
    dependency: transitive
    description:
      name: shared_preferences_android
      sha256: "5bcf0772a761b04f8c6bf814721713de6f3e5d9d89caf8d3fe031b02a342379e"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.11"
  shared_preferences_foundation:
    dependency: transitive
    description:
      name: shared_preferences_foundation
      sha256: "6a52cfcdaeac77cad8c97b539ff688ccfc458c007b4db12be584fbe5c0e49e03"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.4"
  shared_preferences_linux:
    dependency: transitive
    description:
      name: shared_preferences_linux
      sha256: "580abfd40f415611503cae30adf626e6656dfb2f0cee8f465ece7b6defb40f2f"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_platform_interface:
    dependency: transitive
    description:
      name: shared_preferences_platform_interface
      sha256: "57cbf196c486bc2cf1f02b85784932c6094376284b3ad5779d1b1c6c6a816b80"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_web:
    dependency: transitive
    description:
      name: shared_preferences_web
      sha256: c49bd060261c9a3f0ff445892695d6212ff603ef3115edbb448509d407600019
      url: "https://pub.dev"
    source: hosted
    version: "2.4.3"
  shared_preferences_windows:
    dependency: transitive
    description:
      name: shared_preferences_windows
      sha256: "94ef0f72b2d71bc3e700e025db3710911bd51a71cefb65cc609dd0d9a982e3c1"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shelf:
    dependency: transitive
    description:
      name: shelf
      sha256: e7dd780a7ffb623c57850b33f43309312fc863fb6aa3d276a754bb299839ef12
      url: "https://pub.dev"
    source: hosted
    version: "1.4.2"
  shelf_web_socket:
    dependency: transitive
    description:
      name: shelf_web_socket
      sha256: "3632775c8e90d6c9712f883e633716432a27758216dfb61bd86a8321c0580925"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  source_gen:
    dependency: transitive
    description:
      name: source_gen
      sha256: "35c8150ece9e8c8d263337a265153c3329667640850b9304861faea59fc98f6b"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  source_helper:
    dependency: transitive
    description:
      name: source_helper
      sha256: a447acb083d3a5ef17f983dd36201aeea33fedadb3228fa831f2f0c92f0f3aca
      url: "https://pub.dev"
    source: hosted
    version: "1.3.7"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "254ee5351d6cb365c859e20ee823c3bb479bf4a293c22d17a9f1bf144ce86f7c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.1"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "8b27215b45d22309b5cddda1aa2b19bdfec9df0e765f2de506401c071d38d1b1"
      url: "https://pub.dev"
    source: hosted
    version: "1.12.1"
  state_notifier:
    dependency: transitive
    description:
      name: state_notifier
      sha256: b8677376aa54f2d7c58280d5a007f9e8774f1968d1fb1c096adcb4792fba29bb
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: "969e04c80b8bcdf826f8f16579c7b14d780458bd97f56d107d3950fdbeef059d"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: ad47125e588cfd37a9a7f86c7d6356dde8dfe89d071d293f80ca9e9273a33871
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "921cd31725b72fe181906c6a94d987c78e3b98c2e205b397ea399d4054872b43"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: "7f554798625ea768a7518313e58f83891c7f5024f88e46e7182a4558850a4b8e"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: fb31f383e2ee25fbbfe06b40fe21e1e458d14080e3c67e7ba0acfde4df4e0bbd
      url: "https://pub.dev"
    source: hosted
    version: "0.7.4"
  timing:
    dependency: transitive
    description:
      name: timing
      sha256: "62ee18aca144e4a9f29d212f5a4c6a053be252b895ab14b5821996cff4ed90fe"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  url_launcher:
    dependency: "direct main"
    description:
      name: url_launcher
      sha256: f6a7e5c4835bb4e3026a04793a4199ca2d14c739ec378fdfe23fc8075d0439f8
      url: "https://pub.dev"
    source: hosted
    version: "6.3.2"
  url_launcher_android:
    dependency: transitive
    description:
      name: url_launcher_android
      sha256: "0aedad096a85b49df2e4725fa32118f9fa580f3b14af7a2d2221896a02cd5656"
      url: "https://pub.dev"
    source: hosted
    version: "6.3.17"
  url_launcher_ios:
    dependency: transitive
    description:
      name: url_launcher_ios
      sha256: d80b3f567a617cb923546034cc94bfe44eb15f989fe670b37f26abdb9d939cb7
      url: "https://pub.dev"
    source: hosted
    version: "6.3.4"
  url_launcher_linux:
    dependency: transitive
    description:
      name: url_launcher_linux
      sha256: "4e9ba368772369e3e08f231d2301b4ef72b9ff87c31192ef471b380ef29a4935"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.1"
  url_launcher_macos:
    dependency: transitive
    description:
      name: url_launcher_macos
      sha256: c043a77d6600ac9c38300567f33ef12b0ef4f4783a2c1f00231d2b1941fea13f
      url: "https://pub.dev"
    source: hosted
    version: "3.2.3"
  url_launcher_platform_interface:
    dependency: transitive
    description:
      name: url_launcher_platform_interface
      sha256: "552f8a1e663569be95a8190206a38187b531910283c3e982193e4f2733f01029"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  url_launcher_web:
    dependency: transitive
    description:
      name: url_launcher_web
      sha256: "4bd2b7b4dc4d4d0b94e5babfffbca8eac1a126c7f3d6ecbc1a11013faa3abba2"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  url_launcher_windows:
    dependency: transitive
    description:
      name: url_launcher_windows
      sha256: "3284b6d2ac454cf34f114e1d3319866fdd1e19cdc329999057e44ffe936cfa77"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.4"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: ddfa8d30d89985b96407efce8acbdd124701f96741f2d981ca860662f1c0dc02
      url: "https://pub.dev"
    source: hosted
    version: "15.0.0"
  watcher:
    dependency: transitive
    description:
      name: watcher
      sha256: "0b7fd4a0bbc4b92641dbf20adfd7e3fd1398fe17102d94b674234563e110088a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.2"
  web:
    dependency: transitive
    description:
      name: web
      sha256: "868d88a33d8a87b18ffc05f9f030ba328ffefba92d6c127917a2ba740f9cfe4a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  web_socket_channel:
    dependency: "direct main"
    description:
      name: web_socket_channel
      sha256: d88238e5eac9a42bb43ca4e721edba3c08c6354d4a53063afaa568516217621b
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: b9da305ac7c39faa3f030eccd175340f968459dae4af175130b3fc47e40d76ce
      url: "https://pub.dev"
    source: hosted
    version: "3.1.3"
sdks:
  dart: ">=3.8.0 <4.0.0"
  flutter: ">=3.29.0"
</file>

<file path="pubspec.yaml">
name: leadlawk
description: Lead generation and management system for businesses without websites
publish_to: 'none'
version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.6
  flutter_riverpod: ^2.4.9
  dio: ^5.4.0
  go_router: ^13.0.1
  freezed_annotation: ^2.4.1
  json_annotation: ^4.8.1
  shared_preferences: ^2.2.2
  intl: ^0.18.1
  dartz: ^0.10.1
  equatable: ^2.0.5
  url_launcher: ^6.2.2
  web_socket_channel: ^2.4.0
  flutter_dotenv: ^6.0.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.1
  build_runner: ^2.4.7
  freezed: ^2.4.6
  json_serializable: ^6.7.1
  mockito: ^5.4.4

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
    - .env

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
</file>

<file path="README.md">
# LeadLawk

A local lead generation and management system with Flutter UI controls for web scraping. Built with Clean Architecture, this app allows you to discover and manage business leads with customizable qualification thresholds.

## Features

- **UI-Controlled Scraping**: Configure and run scrapes directly from the Flutter app
- **Smart Qualification**: Set custom thresholds for rating, reviews, and recency
- **Lead Management**: Track lead status (New, Called, Interested, Converted, DNC)
- **Platform Detection**: Identifies website builders (GoDaddy, Google Business Sites)
- **Local Storage**: Everything runs locally with SQLite
- **Clean Architecture**: Modular, testable Flutter code with Riverpod state management

## Tech Stack

- **Frontend**: Flutter (Clean Architecture + Riverpod + Dio + GoRouter)
- **Backend**: FastAPI (Python 3.12)
- **Scraping**: Scrapy (polite, HTML-only)
- **Database**: SQLite via SQLAlchemy
- **Platform**: macOS (Apple Silicon compatible)

## Project Structure

```
LeadLawk/
├── lib/                      # Flutter app (Clean Architecture)
│   ├── core/                # Core utilities and error handling
│   ├── features/leads/      # Lead management feature
│   │   ├── domain/          # Business logic and entities
│   │   ├── data/            # Data sources and repositories
│   │   └── presentation/    # UI pages and state management
│   └── main.dart            # App entry point
├── server/                   # Python backend
│   ├── main.py              # FastAPI server
│   ├── models.py            # SQLAlchemy models
│   ├── scraper/             # Scrapy spider
│   └── db/                  # SQLite database location
└── test/                     # Tests
```

## Installation

### Prerequisites

- Flutter SDK (3.0+)
- Python 3.12
- macOS (Apple Silicon or Intel)

### Setup

1. **Clone the repository**
```bash
git clone https://github.com/yourusername/LeadLawk.git
cd LeadLawk
```

2. **Install Flutter dependencies**
```bash
flutter pub get
```

3. **Install Python dependencies**
```bash
cd server
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cd ..

```

## Running the Application

### Start the Backend Server

```bash
cd server
source venv/bin/activate
python main.py
```

The API will be available at `http://localhost:8000`

### Run the Flutter App

In a new terminal:

```bash
flutter run
```

Select your target device (iOS Simulator, Android Emulator, or Chrome for web).

## Usage Guide

### Control the Scraper from the UI

1. **Open Run Scrape Screen**
   - Tap the play button in the app bar

2. **Configure Your Search**
   - **Industry**: Choose from preset chips (Painter, Landscaper, Roofer, Plumber, Electrician) or select "Custom..." for any industry
   - **Location**: Enter a location (e.g., "Austin, TX")
   - **Result Limit**: Set how many results to fetch (1-200)

3. **Set Qualification Thresholds** (Optional)
   - Expand "Advanced Settings"
   - **Min Rating**: Minimum star rating (0-5)
   - **Min Reviews**: Minimum review count
   - **Recent Days**: How recent reviews must be

4. **Run the Scrape**
   - Tap "Run Scrape"
   - Watch the progress bar
   - When complete, you'll be redirected to the Candidates list

### Managing Leads

- **View Leads**: Browse all leads or filter by status/candidates
- **Search**: Use the search bar to find specific businesses
- **Update Status**: Click on a lead and use quick action buttons
- **Add Notes**: Edit notes directly in the lead detail view
- **Call Tracking**: Status automatically tracks your outreach

### Lead Statuses

- 🔘 **New**: Uncontacted leads
- 🟠 **Called**: Attempted contact
- 🔵 **Interested**: Showed interest
- 🟢 **Converted**: Became a customer
- ⚫ **DNC**: Do not contact

## API Endpoints

### Scraping

- `POST /jobs/scrape` - Start a new scrape job
  ```json
  {
    "industry": "painter",
    "location": "Austin, TX",
    "limit": 50,
    "min_rating": 4.0,
    "min_reviews": 3,
    "recent_days": 365
  }
  ```

- `GET /jobs/{job_id}` - Check job status

### Lead Management

- `GET /leads` - List leads (supports filtering)
- `GET /leads/{id}` - Get lead details
- `PUT /leads/{id}` - Update lead status/notes

## Testing

### Flutter Tests

```bash
flutter test
```

### Python Tests

```bash
cd server
pytest test_server.py
```

## Development

### Code Generation (Flutter)

After modifying models:

```bash
flutter pub run build_runner build --delete-conflicting-outputs
```

### Database Reset

To reset the database:

```bash
rm server/db/leadlawk.db
```

The database will be recreated on next server start.

## Configuration

### Scraper Settings

Default thresholds can be modified in the UI's Advanced Settings:
- Min Rating: 4.0 stars
- Min Reviews: 3 reviews  
- Recent Days: 365 days

### API Configuration

Server settings in `server/main.py`:
- Host: `0.0.0.0`
- Port: `8000`

## Troubleshooting

### Android Studio Not Recognizing Flutter Project

1. Close Android Studio
2. Open Android Studio
3. Select "Open" and choose the LeadLawk folder
4. Let it index the project
5. Run configurations should appear

### Server Connection Issues

Ensure the server is running and check:
- Firewall settings
- Port 8000 availability
- CORS configuration in `server/main.py`

### Database Lock Errors

SQLite can lock during concurrent access. Restart the server if this occurs.

## Future Enhancements

- [ ] Real Google Maps scraping (currently using mock data)
- [ ] Export leads to CSV/Excel
- [ ] Email integration
- [ ] Call logging with duration tracking
- [ ] Advanced analytics dashboard
- [ ] Multi-user support

## License

MIT License - See LICENSE file for details

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Open a Pull Request
</file>

</files>
